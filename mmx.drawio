<mxfile host="app.diagrams.net" agent="Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/128.0.0.0 Safari/537.36" version="24.7.14">
  <diagram id="C5RBs43oDa-KdzZeNtuy" name="Page-1">
    <mxGraphModel dx="437" dy="2291" grid="1" gridSize="10" guides="1" tooltips="1" connect="1" arrows="1" fold="1" page="1" pageScale="1" pageWidth="20000" pageHeight="2000" math="0" shadow="0">
      <root>
        <mxCell id="WIyWlLk6GJQsqaUBKTNV-0" />
        <mxCell id="WIyWlLk6GJQsqaUBKTNV-1" parent="WIyWlLk6GJQsqaUBKTNV-0" />
        <mxCell id="bgpGDWmcntnncIZ7-7qG-69" value="" style="rounded=0;whiteSpace=wrap;html=1;" vertex="1" parent="WIyWlLk6GJQsqaUBKTNV-1">
          <mxGeometry x="2930" y="1470" width="660" height="1470" as="geometry" />
        </mxCell>
        <mxCell id="bgpGDWmcntnncIZ7-7qG-33" value="" style="shape=ext;double=1;rounded=1;whiteSpace=wrap;html=1;" vertex="1" parent="WIyWlLk6GJQsqaUBKTNV-1">
          <mxGeometry x="2870" y="790" width="730" height="670" as="geometry" />
        </mxCell>
        <mxCell id="bgpGDWmcntnncIZ7-7qG-19" value="" style="rounded=1;whiteSpace=wrap;html=1;" vertex="1" parent="WIyWlLk6GJQsqaUBKTNV-1">
          <mxGeometry x="1210" y="820" width="760" height="630" as="geometry" />
        </mxCell>
        <mxCell id="bgpGDWmcntnncIZ7-7qG-4" value="" style="rounded=1;whiteSpace=wrap;html=1;" vertex="1" parent="WIyWlLk6GJQsqaUBKTNV-1">
          <mxGeometry x="1110" y="81" width="560" height="590" as="geometry" />
        </mxCell>
        <mxCell id="fa4uJrr_QhnZvR9-6Muc-73" value="" style="rounded=1;whiteSpace=wrap;html=1;" parent="WIyWlLk6GJQsqaUBKTNV-1" vertex="1">
          <mxGeometry x="1740" y="-290" width="600" height="941" as="geometry" />
        </mxCell>
        <mxCell id="WIyWlLk6GJQsqaUBKTNV-2" value="" style="rounded=0;html=1;jettySize=auto;orthogonalLoop=1;fontSize=11;endArrow=block;endFill=0;endSize=8;strokeWidth=1;shadow=0;labelBackgroundColor=none;edgeStyle=orthogonalEdgeStyle;" parent="WIyWlLk6GJQsqaUBKTNV-1" source="WIyWlLk6GJQsqaUBKTNV-3" target="WIyWlLk6GJQsqaUBKTNV-6" edge="1">
          <mxGeometry relative="1" as="geometry" />
        </mxCell>
        <mxCell id="WIyWlLk6GJQsqaUBKTNV-3" value="gets configs&lt;div&gt;pipeline classes&lt;/div&gt;&lt;div&gt;runs the pipeline&lt;/div&gt;" style="rounded=1;whiteSpace=wrap;html=1;fontSize=12;glass=0;strokeWidth=1;shadow=0;" parent="WIyWlLk6GJQsqaUBKTNV-1" vertex="1">
          <mxGeometry x="160" y="79" width="120" height="70" as="geometry" />
        </mxCell>
        <mxCell id="fa4uJrr_QhnZvR9-6Muc-9" value="" style="edgeStyle=orthogonalEdgeStyle;rounded=0;orthogonalLoop=1;jettySize=auto;html=1;" parent="WIyWlLk6GJQsqaUBKTNV-1" source="WIyWlLk6GJQsqaUBKTNV-6" target="WIyWlLk6GJQsqaUBKTNV-7" edge="1">
          <mxGeometry relative="1" as="geometry">
            <Array as="points">
              <mxPoint x="220" y="329" />
              <mxPoint x="310" y="329" />
            </Array>
          </mxGeometry>
        </mxCell>
        <mxCell id="WIyWlLk6GJQsqaUBKTNV-6" value="Which&lt;div&gt;&amp;nbsp;pipeline?&amp;nbsp;&lt;/div&gt;" style="rhombus;whiteSpace=wrap;html=1;shadow=0;fontFamily=Helvetica;fontSize=12;align=center;strokeWidth=1;spacing=6;spacingTop=-4;" parent="WIyWlLk6GJQsqaUBKTNV-1" vertex="1">
          <mxGeometry x="170" y="189" width="100" height="80" as="geometry" />
        </mxCell>
        <mxCell id="WIyWlLk6GJQsqaUBKTNV-7" value="" style="rounded=1;whiteSpace=wrap;html=1;fontSize=12;glass=0;strokeWidth=1;shadow=0;" parent="WIyWlLk6GJQsqaUBKTNV-1" vertex="1">
          <mxGeometry x="120" y="389" width="300" height="530" as="geometry" />
        </mxCell>
        <mxCell id="fa4uJrr_QhnZvR9-6Muc-4" value="RUN.py" style="text;html=1;align=center;verticalAlign=middle;whiteSpace=wrap;rounded=0;" parent="WIyWlLk6GJQsqaUBKTNV-1" vertex="1">
          <mxGeometry x="160" y="49" width="60" height="30" as="geometry" />
        </mxCell>
        <mxCell id="fa4uJrr_QhnZvR9-6Muc-8" value="&lt;font style=&quot;forced-color-adjust: none; color: rgb(0, 0, 0); font-family: Helvetica; font-style: normal; font-variant-ligatures: normal; font-variant-caps: normal; font-weight: 400; letter-spacing: normal; orphans: 2; text-align: center; text-indent: 0px; text-transform: none; widows: 2; word-spacing: 0px; -webkit-text-stroke-width: 0px; white-space: normal; background-color: rgb(251, 251, 251); text-decoration-thickness: initial; text-decoration-style: initial; text-decoration-color: initial; font-size: 16px;&quot;&gt;ResponseModelPipeline&lt;/font&gt;&lt;div style=&quot;forced-color-adjust: none; color: rgb(0, 0, 0); font-family: Helvetica; font-size: 12px; font-style: normal; font-variant-ligatures: normal; font-variant-caps: normal; font-weight: 400; letter-spacing: normal; orphans: 2; text-align: center; text-indent: 0px; text-transform: none; widows: 2; word-spacing: 0px; -webkit-text-stroke-width: 0px; white-space: normal; background-color: rgb(251, 251, 251); text-decoration-thickness: initial; text-decoration-style: initial; text-decoration-color: initial;&quot;&gt;&lt;div style=&quot;forced-color-adjust: none; text-align: left;&quot;&gt;&lt;span style=&quot;forced-color-adjust: none; white-space: pre;&quot;&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;div style=&quot;forced-color-adjust: none; text-align: left;&quot;&gt;&lt;span style=&quot;forced-color-adjust: none; white-space: pre;&quot;&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;/span&gt;- Load + Preprocess/clean data&lt;/div&gt;&lt;div style=&quot;forced-color-adjust: none; text-align: left;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; - Data grain via regression: Brick -&amp;gt; HCP&lt;/div&gt;&lt;div style=&quot;forced-color-adjust: none; text-align: left;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; - Feature engineering (feature builders)&lt;/div&gt;&lt;div style=&quot;forced-color-adjust: none; text-align: left;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; - Bayesian Response model&lt;/div&gt;&lt;div style=&quot;forced-color-adjust: none; text-align: left;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; - Post processing&lt;/div&gt;&lt;div style=&quot;forced-color-adjust: none; text-align: left;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; - Save outputs&lt;/div&gt;&lt;/div&gt;" style="text;whiteSpace=wrap;html=1;" parent="WIyWlLk6GJQsqaUBKTNV-1" vertex="1">
          <mxGeometry x="134" y="419" width="280" height="140" as="geometry" />
        </mxCell>
        <mxCell id="fa4uJrr_QhnZvR9-6Muc-11" value="__INIT__" style="text;html=1;align=center;verticalAlign=middle;whiteSpace=wrap;rounded=0;" parent="WIyWlLk6GJQsqaUBKTNV-1" vertex="1">
          <mxGeometry x="150" y="584" width="60" height="30" as="geometry" />
        </mxCell>
        <mxCell id="fa4uJrr_QhnZvR9-6Muc-12" value="&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;- gets congfigs&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;- starts :&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;a) data_manager&lt;/div&gt;&lt;div&gt;b) experiment_tracker&lt;/div&gt;" style="text;html=1;align=left;verticalAlign=middle;whiteSpace=wrap;rounded=0;" parent="WIyWlLk6GJQsqaUBKTNV-1" vertex="1">
          <mxGeometry x="150" y="614" width="140" height="75" as="geometry" />
        </mxCell>
        <mxCell id="fa4uJrr_QhnZvR9-6Muc-16" value="&lt;font style=&quot;font-size: 16px;&quot;&gt;__call__():&lt;/font&gt;&lt;div&gt;&lt;font style=&quot;font-size: 12px;&quot;&gt;&lt;br&gt;&lt;/font&gt;&lt;/div&gt;&lt;div&gt;&lt;font style=&quot;font-size: 12px;&quot;&gt;&lt;br&gt;&lt;/font&gt;&lt;/div&gt;&lt;div&gt;&lt;font style=&quot;font-size: 12px;&quot;&gt;self.data_loading&amp;nbsp;&lt;/font&gt;&lt;/div&gt;&lt;div&gt;&lt;font style=&quot;font-size: 12px;&quot;&gt;&lt;br&gt;&lt;/font&gt;&lt;/div&gt;&lt;div&gt;&lt;font style=&quot;font-size: 12px;&quot;&gt;self.update_data_dict_with_missing_levels()&lt;/font&gt;&lt;/div&gt;&lt;div&gt;&lt;font style=&quot;font-size: 12px;&quot;&gt;&lt;br&gt;&lt;/font&gt;&lt;/div&gt;&lt;div&gt;&lt;font style=&quot;&quot;&gt;&lt;div style=&quot;&quot;&gt;result_df = self.generate_response_curve()&lt;/div&gt;&lt;div style=&quot;&quot;&gt;&lt;br&gt;&lt;/div&gt;&lt;div style=&quot;&quot;&gt;self.save_results(result_df)&lt;/div&gt;&lt;/font&gt;&lt;/div&gt;" style="text;html=1;align=left;verticalAlign=middle;whiteSpace=wrap;rounded=0;" parent="WIyWlLk6GJQsqaUBKTNV-1" vertex="1">
          <mxGeometry x="150" y="719" width="260" height="160" as="geometry" />
        </mxCell>
        <mxCell id="fa4uJrr_QhnZvR9-6Muc-17" value="&lt;font style=&quot;font-size: 19px;&quot;&gt;run_pipeline.py&lt;/font&gt;" style="text;html=1;align=center;verticalAlign=middle;whiteSpace=wrap;rounded=0;" parent="WIyWlLk6GJQsqaUBKTNV-1" vertex="1">
          <mxGeometry x="200" y="359" width="60" height="30" as="geometry" />
        </mxCell>
        <mxCell id="fa4uJrr_QhnZvR9-6Muc-56" value="" style="rounded=1;whiteSpace=wrap;html=1;" parent="WIyWlLk6GJQsqaUBKTNV-1" vertex="1">
          <mxGeometry x="540" y="339" width="420" height="350" as="geometry" />
        </mxCell>
        <mxCell id="fa4uJrr_QhnZvR9-6Muc-57" value="generate_response_curve" style="text;whiteSpace=wrap;fontSize=16;fontColor=#33FFC9;" parent="WIyWlLk6GJQsqaUBKTNV-1" vertex="1">
          <mxGeometry x="562.5" y="359" width="270" height="40" as="geometry" />
        </mxCell>
        <UserObject label="" link="save_file(&quot;output/features_df.csv&quot;&#xa;save_file(&quot;output/normalized_features_df.csv&quot;&#xa;save_file(&quot;output/region_index_df.csv&quot;" id="fa4uJrr_QhnZvR9-6Muc-61">
          <mxCell style="edgeStyle=orthogonalEdgeStyle;rounded=0;orthogonalLoop=1;jettySize=auto;html=1;entryX=0.5;entryY=0;entryDx=0;entryDy=0;" parent="WIyWlLk6GJQsqaUBKTNV-1" target="fa4uJrr_QhnZvR9-6Muc-56" edge="1">
            <mxGeometry x="-0.0007" relative="1" as="geometry">
              <mxPoint x="397" y="838" as="sourcePoint" />
              <mxPoint x="320" y="399" as="targetPoint" />
              <Array as="points">
                <mxPoint x="480" y="838" />
                <mxPoint x="480" y="289" />
                <mxPoint x="698" y="289" />
              </Array>
              <mxPoint as="offset" />
            </mxGeometry>
          </mxCell>
        </UserObject>
        <mxCell id="fa4uJrr_QhnZvR9-6Muc-62" value="print_preprocessing_plots (plots )&lt;div&gt;print_correlations.&amp;nbsp; (plots heatmaps)&lt;br&gt;&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;response = self.bayesian_modeling()&lt;br&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;lambda_adstocks[channel_code] = response[1]&lt;/span&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;= StanUpliftComputation (CLASS)&lt;/div&gt;&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;rsp_model_op = ResponseModelOutput()&lt;br&gt;&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;&amp;nbsp;rsp_response = rsp_model_op.run()&lt;br&gt;&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;return result_df&lt;br&gt;&lt;/div&gt;" style="text;html=1;align=left;verticalAlign=middle;whiteSpace=wrap;rounded=0;" parent="WIyWlLk6GJQsqaUBKTNV-1" vertex="1">
          <mxGeometry x="547.5" y="389" width="300" height="270" as="geometry" />
        </mxCell>
        <mxCell id="fa4uJrr_QhnZvR9-6Muc-64" value="" style="rounded=1;whiteSpace=wrap;html=1;" parent="WIyWlLk6GJQsqaUBKTNV-1" vertex="1">
          <mxGeometry x="1100" y="-290" width="450" height="260" as="geometry" />
        </mxCell>
        <UserObject label="  &#xa;response = run_bayesian_model. &#xa;     (  from all_channel_features df, gets :&#xa;          features_df,        normalized_features_df,&#xa;          transformation_params,&#xa;          channel_code  )&#xa;&#xa;&#xa;&#xa;&#xa;&#xa;&#xa;&#xa;     &#xa; return response" link="response = run_bayesian_model(&#xa;            all_channel_features[channel_code].features_df,&#xa;            all_channel_features[channel_code].normalized_features_df,&#xa;            all_channel_features[channel_code].transformation_params,&#xa;            all_channel_features[channel_code].channel_code,&#xa;            self.config,&#xa;            self.experiment_tracker,&#xa;            level,&#xa;        )&#xa;&#xa;&#xa;        save_file(&#xa;            data=all_channel_features[channel_code].features_df,&#xa;            file_name=f&#39;{&quot;output/features_df.csv&quot;}&#39;,&#xa;            experiment_tracker=self.experiment_tracker,&#xa;            mlflow_directory=channel_code&#xa;            if level is None&#xa;            else osp.join(level[&quot;speciality&quot;], level[&quot;segment_code&quot;], level[&quot;segment_value&quot;]),&#xa;        )&#xa;        save_file(&#xa;            data=all_channel_features[channel_code].normalized_features_df,&#xa;            file_name=f&#39;{&quot;output/normalized_features_df.csv&quot;}&#39;,&#xa;            experiment_tracker=self.experiment_tracker,&#xa;            mlflow_directory=channel_code&#xa;            if level is None&#xa;            else osp.join(level[&quot;speciality&quot;], level[&quot;segment_code&quot;], level[&quot;segment_value&quot;]),&#xa;        )&#xa;        save_file(&#xa;            data=response[0].region_index_df,&#xa;            file_name=f&#39;{&quot;output/region_index_df.csv&quot;}&#39;,&#xa;            experiment_tracker=self.experiment_tracker,&#xa;            mlflow_directory=channel_code&#xa;            if level is None&#xa;            else osp.join(level[&quot;speciality&quot;], level[&quot;segment_code&quot;], level[&quot;segment_value&quot;]),&#xa;        )&#xa;        return response" id="fa4uJrr_QhnZvR9-6Muc-63">
          <mxCell style="text;whiteSpace=wrap;" parent="WIyWlLk6GJQsqaUBKTNV-1" vertex="1">
            <mxGeometry x="1160" y="-270" width="380" height="240" as="geometry" />
          </mxCell>
        </UserObject>
        <UserObject label="" id="fa4uJrr_QhnZvR9-6Muc-66">
          <mxCell style="edgeStyle=orthogonalEdgeStyle;rounded=0;orthogonalLoop=1;jettySize=auto;html=1;entryX=0.5;entryY=0;entryDx=0;entryDy=0;exitX=0.708;exitY=0.222;exitDx=0;exitDy=0;exitPerimeter=0;" parent="WIyWlLk6GJQsqaUBKTNV-1" source="fa4uJrr_QhnZvR9-6Muc-62" target="fa4uJrr_QhnZvR9-6Muc-64" edge="1">
            <mxGeometry x="-0.0007" relative="1" as="geometry">
              <mxPoint x="850" y="779" as="sourcePoint" />
              <mxPoint x="1240.5" y="429.47" as="targetPoint" />
              <Array as="points">
                <mxPoint x="850" y="449" />
                <mxPoint x="850" y="-360" />
                <mxPoint x="1325" y="-360" />
              </Array>
              <mxPoint as="offset" />
            </mxGeometry>
          </mxCell>
        </UserObject>
        <mxCell id="fa4uJrr_QhnZvR9-6Muc-68" value=" &#xa; Function that fits and generate relevant predictions with the bayesian model&#xa;&#xa;    Returns:&#xa;        - samples_full_df: df with the samples of all relevant parameters from the  bayesian model, which are needed in the response curve generation&#xa;&#xa;&#xa;        - bayesian_model_indexes (MappingIndexes): in the bayesian model&#xa;        code to the corresponding business values &#xa;&#xa;&#xa;&#xa;&#xa;&#xa;" style="text;whiteSpace=wrap;" parent="WIyWlLk6GJQsqaUBKTNV-1" vertex="1">
          <mxGeometry x="1780" y="-190" width="400" height="191" as="geometry" />
        </mxCell>
        <UserObject label="src/response_curve/modeling.py" link="src/response_curve/modeling.py" id="fa4uJrr_QhnZvR9-6Muc-69">
          <mxCell style="text;whiteSpace=wrap;" parent="WIyWlLk6GJQsqaUBKTNV-1" vertex="1">
            <mxGeometry x="1760" y="-320" width="210" height="40" as="geometry" />
          </mxCell>
        </UserObject>
        <mxCell id="fa4uJrr_QhnZvR9-6Muc-70" value="&lt;font style=&quot;font-size: 19px;&quot;&gt;run_pipeline.py&lt;/font&gt;" style="text;html=1;align=center;verticalAlign=middle;whiteSpace=wrap;rounded=0;" parent="WIyWlLk6GJQsqaUBKTNV-1" vertex="1">
          <mxGeometry x="590" y="309" width="60" height="30" as="geometry" />
        </mxCell>
        <mxCell id="fa4uJrr_QhnZvR9-6Muc-71" value="&lt;font style=&quot;font-size: 19px;&quot;&gt;run_pipeline.py&lt;/font&gt;" style="text;html=1;align=center;verticalAlign=middle;whiteSpace=wrap;rounded=0;" parent="WIyWlLk6GJQsqaUBKTNV-1" vertex="1">
          <mxGeometry x="1190" y="-320" width="60" height="30" as="geometry" />
        </mxCell>
        <mxCell id="fa4uJrr_QhnZvR9-6Muc-72" value="&lt;font color=&quot;#33ffc9&quot; style=&quot;font-size: 15px;&quot;&gt;&lt;span style=&quot;font-family: Helvetica; font-style: normal; font-variant-ligatures: normal; font-variant-caps: normal; font-weight: 400; letter-spacing: normal; orphans: 2; text-align: left; text-indent: 0px; text-transform: none; widows: 2; word-spacing: 0px; -webkit-text-stroke-width: 0px; white-space: normal; background-color: rgb(251, 251, 251); text-decoration-thickness: initial; text-decoration-style: initial; text-decoration-color: initial; float: none; display: inline !important;&quot;&gt;&amp;nbsp;def bayesian_modeling:&lt;/span&gt;&lt;br style=&quot;forced-color-adjust: none; padding: 0px; margin: 0px; font-family: Helvetica; font-style: normal; font-variant-ligatures: normal; font-variant-caps: normal; font-weight: 400; letter-spacing: normal; orphans: 2; text-align: left; text-indent: 0px; text-transform: none; widows: 2; word-spacing: 0px; -webkit-text-stroke-width: 0px; white-space: normal; background-color: rgb(251, 251, 251); text-decoration-thickness: initial; text-decoration-style: initial; text-decoration-color: initial;&quot;&gt;&lt;span style=&quot;forced-color-adjust: none; padding: 0px; margin: 0px; font-family: Helvetica; font-style: normal; font-variant-ligatures: normal; font-variant-caps: normal; font-weight: 400; letter-spacing: normal; orphans: 2; text-align: left; text-indent: 0px; text-transform: none; widows: 2; word-spacing: 0px; -webkit-text-stroke-width: 0px; background-color: rgb(251, 251, 251); text-decoration-thickness: initial; text-decoration-style: initial; text-decoration-color: initial; white-space: pre;&quot;&gt;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;/font&gt;" style="text;whiteSpace=wrap;html=1;" parent="WIyWlLk6GJQsqaUBKTNV-1" vertex="1">
          <mxGeometry x="1120" y="-280" width="230" height="50" as="geometry" />
        </mxCell>
        <mxCell id="fa4uJrr_QhnZvR9-6Muc-74" value="&lt;div style=&quot;forced-color-adjust: none; padding: 0px; margin: 0px; font-family: Helvetica; font-style: normal; font-variant-ligatures: normal; font-variant-caps: normal; font-weight: 400; letter-spacing: normal; orphans: 2; text-align: left; text-indent: 0px; text-transform: none; widows: 2; word-spacing: 0px; -webkit-text-stroke-width: 0px; white-space: normal; background-color: rgb(251, 251, 251); text-decoration-thickness: initial; text-decoration-style: initial; text-decoration-color: initial; font-size: 15px;&quot;&gt;&lt;font color=&quot;#33ff99&quot; style=&quot;font-size: 15px;&quot;&gt;def run_bayesian_model(&lt;/font&gt;&lt;/div&gt;&lt;div style=&quot;forced-color-adjust: none; padding: 0px; margin: 0px; font-family: Helvetica; font-style: normal; font-variant-ligatures: normal; font-variant-caps: normal; font-weight: 400; letter-spacing: normal; orphans: 2; text-align: left; text-indent: 0px; text-transform: none; widows: 2; word-spacing: 0px; -webkit-text-stroke-width: 0px; white-space: normal; background-color: rgb(251, 251, 251); text-decoration-thickness: initial; text-decoration-style: initial; text-decoration-color: initial; font-size: 15px;&quot;&gt;&lt;font color=&quot;#33ff99&quot; style=&quot;font-size: 15px;&quot;&gt;&amp;nbsp; &amp;nbsp; features_df, normalized_features_df,transformation_params,&lt;/font&gt;&lt;/div&gt;&lt;div style=&quot;forced-color-adjust: none; padding: 0px; margin: 0px; font-family: Helvetica; font-style: normal; font-variant-ligatures: normal; font-variant-caps: normal; font-weight: 400; letter-spacing: normal; orphans: 2; text-align: left; text-indent: 0px; text-transform: none; widows: 2; word-spacing: 0px; -webkit-text-stroke-width: 0px; white-space: normal; background-color: rgb(251, 251, 251); text-decoration-thickness: initial; text-decoration-style: initial; text-decoration-color: initial; font-size: 15px;&quot;&gt;&lt;font color=&quot;#33ff99&quot; style=&quot;font-size: 15px;&quot;&gt;&amp;nbsp; &amp;nbsp; channel_code, config, experiment_tracker, levels&lt;/font&gt;&lt;/div&gt;&lt;div style=&quot;forced-color-adjust: none; padding: 0px; margin: 0px; font-family: Helvetica; font-style: normal; font-variant-ligatures: normal; font-variant-caps: normal; font-weight: 400; letter-spacing: normal; orphans: 2; text-align: left; text-indent: 0px; text-transform: none; widows: 2; word-spacing: 0px; -webkit-text-stroke-width: 0px; white-space: normal; background-color: rgb(251, 251, 251); text-decoration-thickness: initial; text-decoration-style: initial; text-decoration-color: initial; font-size: 15px;&quot;&gt;&lt;font color=&quot;#33ff99&quot; style=&quot;font-size: 15px;&quot;&gt;):&lt;/font&gt;&lt;/div&gt;" style="text;whiteSpace=wrap;html=1;" parent="WIyWlLk6GJQsqaUBKTNV-1" vertex="1">
          <mxGeometry x="1780" y="-270" width="480" height="80" as="geometry" />
        </mxCell>
        <UserObject label="# &lt;&lt; (1) INITIALIZATION: BayesianResponseModel&gt;&gt;&#xa;        stan_model_file_list = config.get(&quot;STAN_MODEL_FILE&quot;)&#xa;    if config.get(&quot;USE_BUILDER&quot;):&#xa;        sb = StanBuilder(channel_code, config)&#xa;        sb.build_and_save_model(stan_model_file)&#xa;&#xa;&#xa;    bayesian_model = BayesianResponseModel()&#xa;&#xa;&#xa;    # &lt;&lt; (2) MODEL INPUT CREATION &gt;&gt;&#xa;    bayesian_model.create_data_input()&#xa;&#xa;&#xa;    # &lt;&lt; (3) MODEL COMPILATION: BayesianResponseModel &gt;&gt;&#xa;    bayesian_model.compile_model()&#xa;&#xa;&#xa;    # &lt;&lt; (4) MODEL TRAINING: BayesianResponseModel &gt;&gt;&#xa;    bayesian_model.train_model()&#xa;&#xa;&#xa;    # Compute sample and mean_adstock&#xa;    samples_df = bayesian_model.fit.draws_pd()&#xa;&#xa;&#xa;    # &lt;&lt; (5) POST PROCESSSING: BayesianResponseModel&gt;&gt;  - Check the A&amp;P Code in Details since this is a part of it.&#xa;  &#xa;    model_post_process = BayesianPostProcess()&#xa;    model_post_process.run_post_processing()&#xa;&#xa;&#xa;    return (&#xa;        bayesian_model.indexes,&#xa;        lambda_adstock,&#xa;        bayesian_model,&#xa;        params_summary_df,&#xa;    )" link="# &lt;&lt; (1) INITIALIZATION: BayesianResponseModel&gt;&gt;&#xa;        stan_model_file_list = config.get(&quot;STAN_MODEL_FILE&quot;)&#xa;    if config.get(&quot;USE_BUILDER&quot;):&#xa;        sb = StanBuilder(channel_code, config)&#xa;        sb.build_and_save_model(stan_model_file)&#xa;&#xa;&#xa;    bayesian_model = BayesianResponseModel()&#xa;&#xa;&#xa;    # &lt;&lt; (2) MODEL INPUT CREATION &gt;&gt;&#xa;    bayesian_model.create_data_input()&#xa;&#xa;&#xa;    # &lt;&lt; (3) MODEL COMPILATION: BayesianResponseModel &gt;&gt;&#xa;    bayesian_model.compile_model()&#xa;&#xa;&#xa;    # &lt;&lt; (4) MODEL TRAINING: BayesianResponseModel &gt;&gt;&#xa;    bayesian_model.train_model()&#xa;&#xa;&#xa;    # Compute sample and mean_adstock&#xa;    samples_df = bayesian_model.fit.draws_pd()&#xa;&#xa;&#xa;    # &lt;&lt; (5) POST PROCESSSING: BayesianResponseModel&gt;&gt;  - Check the A&amp;P Code in Details since this is a part of it.&#xa;  &#xa;    model_post_process = BayesianPostProcess()&#xa;    model_post_process.run_post_processing()&#xa;    return (&#xa;        bayesian_model.indexes,&#xa;        lambda_adstock,&#xa;        bayesian_model,&#xa;        params_summary_df,&#xa;    )" id="fa4uJrr_QhnZvR9-6Muc-75">
          <mxCell style="text;whiteSpace=wrap;" parent="WIyWlLk6GJQsqaUBKTNV-1" vertex="1">
            <mxGeometry x="1750" y="21" width="560" height="560" as="geometry" />
          </mxCell>
        </UserObject>
        <mxCell id="fa4uJrr_QhnZvR9-6Muc-76" value="using &#xa;cmdstanpy.CmdStanModel&#xa;returns the CODE of model as str" style="text;whiteSpace=wrap;fillColor=#dae8fc;strokeColor=#6c8ebf;" parent="WIyWlLk6GJQsqaUBKTNV-1" vertex="1">
          <mxGeometry x="2140" y="171" width="180" height="60" as="geometry" />
        </mxCell>
        <mxCell id="fa4uJrr_QhnZvR9-6Muc-77" value="&lt;div&gt;calculates (uses sample)&lt;span style=&quot;background-color: initial;&quot;&gt;(MCMC)&amp;nbsp;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;sampling from the posterior distribution&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;returns an&amp;nbsp;&lt;/span&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;CmdStanMCMC object with all info&lt;/span&gt;&lt;/div&gt;" style="text;whiteSpace=wrap;html=1;fillColor=#dae8fc;strokeColor=#6c8ebf;" parent="WIyWlLk6GJQsqaUBKTNV-1" vertex="1">
          <mxGeometry x="2110" y="246" width="220" height="75" as="geometry" />
        </mxCell>
        <mxCell id="fa4uJrr_QhnZvR9-6Muc-79" value="method is used to extract the posterior samples (or draws) from a fitted model in the form of a &lt;strong&gt;Pandas DataFrame&lt;/strong&gt;" style="text;whiteSpace=wrap;html=1;fillColor=#dae8fc;strokeColor=#6c8ebf;" parent="WIyWlLk6GJQsqaUBKTNV-1" vertex="1">
          <mxGeometry x="2040" y="341" width="270" height="50" as="geometry" />
        </mxCell>
        <mxCell id="fa4uJrr_QhnZvR9-6Muc-81" value="" style="endArrow=classic;html=1;rounded=0;entryX=0;entryY=0.25;entryDx=0;entryDy=0;exitX=1;exitY=0.75;exitDx=0;exitDy=0;" parent="WIyWlLk6GJQsqaUBKTNV-1" source="fa4uJrr_QhnZvR9-6Muc-72" target="fa4uJrr_QhnZvR9-6Muc-74" edge="1">
          <mxGeometry width="50" height="50" relative="1" as="geometry">
            <mxPoint x="1390" y="-229" as="sourcePoint" />
            <mxPoint x="1440" y="-279" as="targetPoint" />
          </mxGeometry>
        </mxCell>
        <mxCell id="bgpGDWmcntnncIZ7-7qG-0" value="post process validations like:&#xa;check intercept, betas, rhat.." style="text;whiteSpace=wrap;fillColor=#dae8fc;strokeColor=#6c8ebf;" vertex="1" parent="WIyWlLk6GJQsqaUBKTNV-1">
          <mxGeometry x="2050" y="441" width="190" height="50" as="geometry" />
        </mxCell>
        <UserObject label="&lt;font color=&quot;#3399ff&quot;&gt;&lt;span style=&quot;font-family: Helvetica; font-size: 12px; font-style: normal; font-variant-ligatures: normal; font-variant-caps: normal; font-weight: 400; letter-spacing: normal; orphans: 2; text-align: left; text-indent: 0px; text-transform: none; widows: 2; word-spacing: 0px; -webkit-text-stroke-width: 0px; white-space: normal; background-color: rgb(251, 251, 251); text-decoration-thickness: initial; text-decoration-style: initial; text-decoration-color: initial; float: none; display: inline !important;&quot;&gt;save_file(&quot;output/features_df.csv&quot;)&lt;/span&gt;&lt;br style=&quot;forced-color-adjust: none; padding: 0px; margin: 0px; font-family: Helvetica; font-size: 12px; font-style: normal; font-variant-ligatures: normal; font-variant-caps: normal; font-weight: 400; letter-spacing: normal; orphans: 2; text-align: left; text-indent: 0px; text-transform: none; widows: 2; word-spacing: 0px; -webkit-text-stroke-width: 0px; white-space: normal; background-color: rgb(251, 251, 251); text-decoration-thickness: initial; text-decoration-style: initial; text-decoration-color: initial;&quot;&gt;&lt;br style=&quot;forced-color-adjust: none; padding: 0px; margin: 0px; font-family: Helvetica; font-size: 12px; font-style: normal; font-variant-ligatures: normal; font-variant-caps: normal; font-weight: 400; letter-spacing: normal; orphans: 2; text-align: left; text-indent: 0px; text-transform: none; widows: 2; word-spacing: 0px; -webkit-text-stroke-width: 0px; white-space: normal; background-color: rgb(251, 251, 251); text-decoration-thickness: initial; text-decoration-style: initial; text-decoration-color: initial;&quot;&gt;&lt;span style=&quot;font-family: Helvetica; font-size: 12px; font-style: normal; font-variant-ligatures: normal; font-variant-caps: normal; font-weight: 400; letter-spacing: normal; orphans: 2; text-align: left; text-indent: 0px; text-transform: none; widows: 2; word-spacing: 0px; -webkit-text-stroke-width: 0px; white-space: normal; background-color: rgb(251, 251, 251); text-decoration-thickness: initial; text-decoration-style: initial; text-decoration-color: initial; float: none; display: inline !important;&quot;&gt;save_file(&quot;output/normalized_features_df.csv&quot;)&lt;/span&gt;&lt;br style=&quot;forced-color-adjust: none; padding: 0px; margin: 0px; font-family: Helvetica; font-size: 12px; font-style: normal; font-variant-ligatures: normal; font-variant-caps: normal; font-weight: 400; letter-spacing: normal; orphans: 2; text-align: left; text-indent: 0px; text-transform: none; widows: 2; word-spacing: 0px; -webkit-text-stroke-width: 0px; white-space: normal; background-color: rgb(251, 251, 251); text-decoration-thickness: initial; text-decoration-style: initial; text-decoration-color: initial;&quot;&gt;&lt;br style=&quot;forced-color-adjust: none; padding: 0px; margin: 0px; font-family: Helvetica; font-size: 12px; font-style: normal; font-variant-ligatures: normal; font-variant-caps: normal; font-weight: 400; letter-spacing: normal; orphans: 2; text-align: left; text-indent: 0px; text-transform: none; widows: 2; word-spacing: 0px; -webkit-text-stroke-width: 0px; white-space: normal; background-color: rgb(251, 251, 251); text-decoration-thickness: initial; text-decoration-style: initial; text-decoration-color: initial;&quot;&gt;&lt;span style=&quot;font-family: Helvetica; font-size: 12px; font-style: normal; font-variant-ligatures: normal; font-variant-caps: normal; font-weight: 400; letter-spacing: normal; orphans: 2; text-align: left; text-indent: 0px; text-transform: none; widows: 2; word-spacing: 0px; -webkit-text-stroke-width: 0px; white-space: normal; background-color: rgb(251, 251, 251); text-decoration-thickness: initial; text-decoration-style: initial; text-decoration-color: initial; float: none; display: inline !important;&quot;&gt;save_file(&quot;output/region_index_df.csv&quot;)&lt;/span&gt;&lt;/font&gt;" link="&lt;span style=&quot;color: rgb(0, 0, 0); font-family: Helvetica; font-size: 12px; font-style: normal; font-variant-ligatures: normal; font-variant-caps: normal; font-weight: 400; letter-spacing: normal; orphans: 2; text-align: left; text-indent: 0px; text-transform: none; widows: 2; word-spacing: 0px; -webkit-text-stroke-width: 0px; white-space: normal; background-color: rgb(251, 251, 251); text-decoration-thickness: initial; text-decoration-style: initial; text-decoration-color: initial; display: inline !important; float: none;&quot;&gt;save_file(&quot;output/features_df.csv&quot;)&lt;/span&gt;&lt;br style=&quot;forced-color-adjust: none; padding: 0px; margin: 0px; color: rgb(0, 0, 0); font-family: Helvetica; font-size: 12px; font-style: normal; font-variant-ligatures: normal; font-variant-caps: normal; font-weight: 400; letter-spacing: normal; orphans: 2; text-align: left; text-indent: 0px; text-transform: none; widows: 2; word-spacing: 0px; -webkit-text-stroke-width: 0px; white-space: normal; background-color: rgb(251, 251, 251); text-decoration-thickness: initial; text-decoration-style: initial; text-decoration-color: initial;&quot;&gt;&lt;br style=&quot;forced-color-adjust: none; padding: 0px; margin: 0px; color: rgb(0, 0, 0); font-family: Helvetica; font-size: 12px; font-style: normal; font-variant-ligatures: normal; font-variant-caps: normal; font-weight: 400; letter-spacing: normal; orphans: 2; text-align: left; text-indent: 0px; text-transform: none; widows: 2; word-spacing: 0px; -webkit-text-stroke-width: 0px; white-space: normal; background-color: rgb(251, 251, 251); text-decoration-thickness: initial; text-decoration-style: initial; text-decoration-color: initial;&quot;&gt;&lt;br style=&quot;forced-color-adjust: none; padding: 0px; margin: 0px; color: rgb(0, 0, 0); font-family: Helvetica; font-size: 12px; font-style: normal; font-variant-ligatures: normal; font-variant-caps: normal; font-weight: 400; letter-spacing: normal; orphans: 2; text-align: left; text-indent: 0px; text-transform: none; widows: 2; word-spacing: 0px; -webkit-text-stroke-width: 0px; white-space: normal; background-color: rgb(251, 251, 251); text-decoration-thickness: initial; text-decoration-style: initial; text-decoration-color: initial;&quot;&gt;&lt;span style=&quot;color: rgb(0, 0, 0); font-family: Helvetica; font-size: 12px; font-style: normal; font-variant-ligatures: normal; font-variant-caps: normal; font-weight: 400; letter-spacing: normal; orphans: 2; text-align: left; text-indent: 0px; text-transform: none; widows: 2; word-spacing: 0px; -webkit-text-stroke-width: 0px; white-space: normal; background-color: rgb(251, 251, 251); text-decoration-thickness: initial; text-decoration-style: initial; text-decoration-color: initial; display: inline !important; float: none;&quot;&gt;save_file(&quot;output/normalized_features_df.csv&quot;)&lt;/span&gt;&lt;br style=&quot;forced-color-adjust: none; padding: 0px; margin: 0px; color: rgb(0, 0, 0); font-family: Helvetica; font-size: 12px; font-style: normal; font-variant-ligatures: normal; font-variant-caps: normal; font-weight: 400; letter-spacing: normal; orphans: 2; text-align: left; text-indent: 0px; text-transform: none; widows: 2; word-spacing: 0px; -webkit-text-stroke-width: 0px; white-space: normal; background-color: rgb(251, 251, 251); text-decoration-thickness: initial; text-decoration-style: initial; text-decoration-color: initial;&quot;&gt;&lt;br style=&quot;forced-color-adjust: none; padding: 0px; margin: 0px; color: rgb(0, 0, 0); font-family: Helvetica; font-size: 12px; font-style: normal; font-variant-ligatures: normal; font-variant-caps: normal; font-weight: 400; letter-spacing: normal; orphans: 2; text-align: left; text-indent: 0px; text-transform: none; widows: 2; word-spacing: 0px; -webkit-text-stroke-width: 0px; white-space: normal; background-color: rgb(251, 251, 251); text-decoration-thickness: initial; text-decoration-style: initial; text-decoration-color: initial;&quot;&gt;&lt;span style=&quot;color: rgb(0, 0, 0); font-family: Helvetica; font-size: 12px; font-style: normal; font-variant-ligatures: normal; font-variant-caps: normal; font-weight: 400; letter-spacing: normal; orphans: 2; text-align: left; text-indent: 0px; text-transform: none; widows: 2; word-spacing: 0px; -webkit-text-stroke-width: 0px; white-space: normal; background-color: rgb(251, 251, 251); text-decoration-thickness: initial; text-decoration-style: initial; text-decoration-color: initial; display: inline !important; float: none;&quot;&gt;save_file(&quot;output/region_index_df.csv&quot;)&lt;/span&gt;&lt;br style=&quot;forced-color-adjust: none; padding: 0px; margin: 0px; color: rgb(0, 0, 0); font-family: Helvetica; font-size: 12px; font-style: normal; font-variant-ligatures: normal; font-variant-caps: normal; font-weight: 400; letter-spacing: normal; orphans: 2; text-align: left; text-indent: 0px; text-transform: none; widows: 2; word-spacing: 0px; -webkit-text-stroke-width: 0px; white-space: normal; background-color: rgb(251, 251, 251); text-decoration-thickness: initial; text-decoration-style: initial; text-decoration-color: initial;&quot;&gt;" id="bgpGDWmcntnncIZ7-7qG-1">
          <mxCell style="text;whiteSpace=wrap;html=1;" vertex="1" parent="WIyWlLk6GJQsqaUBKTNV-1">
            <mxGeometry x="1160" y="-169" width="280" height="100" as="geometry" />
          </mxCell>
        </UserObject>
        <UserObject label="src/response_curve/response_curve_generator.py" link="src/response_curve/response_curve_generator.py" id="bgpGDWmcntnncIZ7-7qG-3">
          <mxCell style="text;whiteSpace=wrap;strokeWidth=2;fontSize=14;" vertex="1" parent="WIyWlLk6GJQsqaUBKTNV-1">
            <mxGeometry x="1120" y="45" width="370" height="40" as="geometry" />
          </mxCell>
        </UserObject>
        <mxCell id="bgpGDWmcntnncIZ7-7qG-6" value="&lt;span style=&quot;font-family: Helvetica; font-size: 12px; font-style: normal; font-variant-ligatures: normal; font-variant-caps: normal; font-weight: 400; letter-spacing: normal; orphans: 2; text-align: left; text-indent: 0px; text-transform: none; widows: 2; word-spacing: 0px; -webkit-text-stroke-width: 0px; white-space: normal; background-color: rgb(251, 251, 251); text-decoration-thickness: initial; text-decoration-style: initial; text-decoration-color: initial; float: none; display: inline !important;&quot;&gt;&lt;font color=&quot;#cc6600&quot;&gt;StanUpliftComputation CLASS&lt;/font&gt;&lt;/span&gt;" style="text;whiteSpace=wrap;html=1;" vertex="1" parent="WIyWlLk6GJQsqaUBKTNV-1">
          <mxGeometry x="1160" y="110" width="200" height="40" as="geometry" />
        </mxCell>
        <UserObject label="def __init__( ):&#xa;        &quot;&quot;&quot;&#xa;        Constructor method&#xa;        &quot;&quot;&quot;&#xa;        self.bayesian_model = bayesian_model&#xa;        &#xa;        self.bayesian_model.create_data_input()&#xa;        self.features_df = (... )&#xa;        self.transformation_params = channel_features.transformation_params&#xa;        self.bayesian_model_indexes = bayesian_model_indexes&#xa;        self.response_curves_manager = response_curves_manager&#xa;        self.channel_code = channel_features.channel_code&#xa;        self.config = config&#xa;        self.brand_time_horizon = self.bayesian_model.brand_time_horizon&#xa;        self.brand_region_stan_index = self.bayesian_model.brand_region_stan_index&#xa;        self.transfo_target = self.transformation_params(self.config.get(&quot;TARGET_VARIABLE&quot;))&#xa;        self.n_brands= len(self.bayesian_model_indexes.index_brand)&#xa;        self.brand_time_index = (...)&#xa;        self.uplift_aggregation_index = None&#xa;        self.national_features = channel_features.national_features_df&#xa;        self.touchpoints = list(...)&#xa;        self.contribs_names = {f&quot;contrib_{i}&quot;: i for i in self.touchpoints}&#xa;        self.adstock_lengths = get_adstock_lengths()&#xa;&#xa;        self.uplift_manager = UpliftFeatureManager(CLASS)&#xa;&#xa;&#xa;        sb = GeneratedQuantitiesBuilder( CLASS)&#xa;&#xa;&#xa;        sb.build_and_save_model(&quot;stan_file.stan&quot;)&#xa;        self.gq_model = cmdstanpy.CmdStanModel()&#xa;        self.gq_model.compile()" link="def __init__( ):&#xa;        &quot;&quot;&quot;&#xa;        Constructor method&#xa;        &quot;&quot;&quot;&#xa;        self.bayesian_model = bayesian_model&#xa;        &#xa;        self.bayesian_model.create_data_input()&#xa;        self.features_df = (... )&#xa;        self.transformation_params = channel_features.transformation_params&#xa;        self.bayesian_model_indexes = bayesian_model_indexes&#xa;        self.response_curves_manager = response_curves_manager&#xa;        self.channel_code = channel_features.channel_code&#xa;        self.config = config&#xa;        self.brand_time_horizon = self.bayesian_model.brand_time_horizon&#xa;        self.brand_region_stan_index = self.bayesian_model.brand_region_stan_index&#xa;&#xa;&#xa;        self.transfo_target = self.transformation_params(self.config.get(&quot;TARGET_VARIABLE&quot;))&#xa;        self.n_brands = len(self.bayesian_model_indexes.index_brand)&#xa;        self.brand_time_index = (...)&#xa;&#xa;&#xa;        self.uplift_aggregation_index = None&#xa;        self.national_features = channel_features.national_features_df&#xa;&#xa;&#xa;        self.touchpoints = list(...)&#xa;        self.contribs_names = {f&quot;contrib_{i}&quot;: i for i in self.touchpoints}&#xa;        self.adstock_lengths = get_adstock_lengths()&#xa;        self.uplift_manager = UpliftFeatureManager(CLASS)&#xa;&#xa;&#xa;        sb = GeneratedQuantitiesBuilder( )&#xa;        sb.build_and_save_model(&quot;stan_file.stan&quot;)&#xa;        self.gq_model = cmdstanpy.CmdStanModel()&#xa;        self.gq_model.compile()" id="bgpGDWmcntnncIZ7-7qG-7">
          <mxCell style="text;whiteSpace=wrap;" vertex="1" parent="WIyWlLk6GJQsqaUBKTNV-1">
            <mxGeometry x="1125" y="161" width="530" height="540" as="geometry" />
          </mxCell>
        </UserObject>
        <mxCell id="bgpGDWmcntnncIZ7-7qG-9" value="Creates Stan model file structure as TEXT" style="text;html=1;align=center;verticalAlign=middle;whiteSpace=wrap;rounded=0;fillColor=#dae8fc;strokeColor=#6c8ebf;" vertex="1" parent="WIyWlLk6GJQsqaUBKTNV-1">
          <mxGeometry x="1430" y="591" width="150" height="60" as="geometry" />
        </mxCell>
        <UserObject label="" link="save_file(&quot;output/features_df.csv&quot;&#xa;save_file(&quot;output/normalized_features_df.csv&quot;&#xa;save_file(&quot;output/region_index_df.csv&quot;" id="bgpGDWmcntnncIZ7-7qG-10">
          <mxCell style="edgeStyle=orthogonalEdgeStyle;rounded=0;orthogonalLoop=1;jettySize=auto;html=1;exitX=1;exitY=0.5;exitDx=0;exitDy=0;entryX=0.5;entryY=0;entryDx=0;entryDy=0;" edge="1" parent="WIyWlLk6GJQsqaUBKTNV-1" source="fa4uJrr_QhnZvR9-6Muc-62" target="bgpGDWmcntnncIZ7-7qG-6">
            <mxGeometry x="-0.0007" relative="1" as="geometry">
              <mxPoint x="1000" y="558" as="sourcePoint" />
              <mxPoint x="1277.0588235294117" y="640.9999999999998" as="targetPoint" />
              <Array as="points">
                <mxPoint x="990" y="524" />
                <mxPoint x="990" y="30" />
                <mxPoint x="1260" y="30" />
              </Array>
              <mxPoint as="offset" />
            </mxGeometry>
          </mxCell>
        </UserObject>
        <mxCell id="bgpGDWmcntnncIZ7-7qG-14" value="&lt;div style=&quot;forced-color-adjust: none;&quot;&gt;&lt;div style=&quot;forced-color-adjust: none;&quot;&gt;results_bayesian_uplift_channel = &lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;&lt;font color=&quot;#ff66ff&quot;&gt;uplift_computation.compute_df(&lt;span style=&quot;forced-color-adjust: none; background-color: initial;&quot;&gt;&quot;RESPONSE_CURVE_YEARS&quot;)&lt;/span&gt;&lt;span style=&quot;forced-color-adjust: none; background-color: initial;&quot;&gt;)&lt;/span&gt;&lt;/font&gt;&lt;/div&gt;&lt;/div&gt;&lt;div style=&quot;forced-color-adjust: none;&quot;&gt;&lt;br style=&quot;forced-color-adjust: none; color: rgb(0, 0, 0); font-family: Helvetica; font-size: 12px; font-style: normal; font-variant-ligatures: normal; font-variant-caps: normal; font-weight: 400; letter-spacing: normal; orphans: 2; text-align: left; text-indent: 0px; text-transform: none; widows: 2; word-spacing: 0px; -webkit-text-stroke-width: 0px; white-space: normal; background-color: rgb(251, 251, 251); text-decoration-thickness: initial; text-decoration-style: initial; text-decoration-color: initial;&quot;&gt;&lt;/div&gt;" style="text;whiteSpace=wrap;html=1;" vertex="1" parent="WIyWlLk6GJQsqaUBKTNV-1">
          <mxGeometry x="547.5" y="535" width="402.5" height="70" as="geometry" />
        </mxCell>
        <mxCell id="bgpGDWmcntnncIZ7-7qG-15" value="&lt;span style=&quot;font-family: Helvetica; font-size: 12px; font-style: normal; font-variant-ligatures: normal; font-variant-caps: normal; font-weight: 400; letter-spacing: normal; orphans: 2; text-align: left; text-indent: 0px; text-transform: none; widows: 2; word-spacing: 0px; -webkit-text-stroke-width: 0px; white-space: normal; background-color: rgb(251, 251, 251); text-decoration-thickness: initial; text-decoration-style: initial; text-decoration-color: initial; float: none; display: inline !important;&quot;&gt;&lt;font color=&quot;#ff66ff&quot;&gt;uplift_computation&lt;/font&gt;&lt;/span&gt;" style="text;whiteSpace=wrap;html=1;" vertex="1" parent="WIyWlLk6GJQsqaUBKTNV-1">
          <mxGeometry x="547.5" y="504" width="130" height="40" as="geometry" />
        </mxCell>
        <UserObject label="" link="save_file(&quot;output/features_df.csv&quot;&#xa;save_file(&quot;output/normalized_features_df.csv&quot;&#xa;save_file(&quot;output/region_index_df.csv&quot;" id="bgpGDWmcntnncIZ7-7qG-17">
          <mxCell style="edgeStyle=orthogonalEdgeStyle;rounded=0;orthogonalLoop=1;jettySize=auto;html=1;entryX=0.5;entryY=0;entryDx=0;entryDy=0;" edge="1" parent="WIyWlLk6GJQsqaUBKTNV-1" target="bgpGDWmcntnncIZ7-7qG-18">
            <mxGeometry x="-0.0007" relative="1" as="geometry">
              <mxPoint x="708" y="569" as="sourcePoint" />
              <mxPoint x="1340" y="880" as="targetPoint" />
              <Array as="points">
                <mxPoint x="708" y="579" />
                <mxPoint x="872" y="579" />
                <mxPoint x="872" y="760" />
                <mxPoint x="1440" y="760" />
              </Array>
              <mxPoint as="offset" />
            </mxGeometry>
          </mxCell>
        </UserObject>
        <UserObject label="def compute_df(&quot;RESPONSE_CURVE_YEARS&quot;)" link="uplift_computation.compute_df(&#xa;                self.config.get(&quot;RESPONSE_CURVE_YEARS&quot;)" id="bgpGDWmcntnncIZ7-7qG-18">
          <mxCell style="text;whiteSpace=wrap;fontColor=#FF8000;" vertex="1" parent="WIyWlLk6GJQsqaUBKTNV-1">
            <mxGeometry x="1270" y="840" width="340" height="50" as="geometry" />
          </mxCell>
        </UserObject>
        <UserObject label="src/response_curve/response_curve_generator.py" link="src/response_curve/response_curve_generator.py" id="bgpGDWmcntnncIZ7-7qG-20">
          <mxCell style="text;whiteSpace=wrap;" vertex="1" parent="WIyWlLk6GJQsqaUBKTNV-1">
            <mxGeometry x="1300" y="790" width="300" height="40" as="geometry" />
          </mxCell>
        </UserObject>
        <mxCell id="bgpGDWmcntnncIZ7-7qG-21" value="Computes all necessary DF for uplifts and contribution computation.&#xa;DFs:&#xa;&#xa;1) Sales contribution:   contains for each year and touchpoint the delta&#xa;to null volumes for uplift 0 and 1, with contribution method for uplifted feature&#xa;   calculation&#xa;&#xa;2) Sales distribution df: contains for each month, each uplift value, and each touchpoint, the delta to null volumes&#xa;&#xa;3)  Volumes uplifts uplift: contains for each year, each uplift value, and each touchpoint, the delta to null volumes" style="text;whiteSpace=wrap;fillColor=#dae8fc;strokeColor=#6c8ebf;fontSize=14;align=left;spacingLeft=5;" vertex="1" parent="WIyWlLk6GJQsqaUBKTNV-1">
          <mxGeometry x="1310" y="879" width="630" height="241" as="geometry" />
        </mxCell>
        <UserObject label="for year in years:&#xa;            self.uplift_aggregation_index = get_uplift_time_scope( Scoped year_weeks for uplift computation)&#xa; &#xa;            value_contribution_year, _ = self.compute_uplift_df(&#xa;                uplifts=[0, 1], year=year, is_contrib=True&#xa;            )&#xa;            value_contribution = pd.concat(value_contribution, value_contribution_year],) &#xa;&#xa;           &#xa;            value_uplifts_year, value_distribution_year = self.compute_uplift_df(&quot;UPLIFT_VALUES_TO_COMPUTE&quot;, year)&#xa;            &#xa;        results_uplift_channel = ResultsBayesianUpliftChannel()&#xa;&#xa;        return results_uplift_channel" link="for year in years:&#xa;            self.uplift_aggregation_index = get_uplift_time_scope( Scoped year_weeks for uplift computation)&#xa; &#xa;            value_contribution_year, _ = self.compute_uplift_df(&#xa;                uplifts=[0, 1], year=year, is_contrib=True&#xa;            )&#xa;            value_contribution = pd.concat(&#xa;                [value_contribution, value_contribution_year],&#xa;                axis=0,&#xa;                sort=False,&#xa;            ) &#xa;           #&quot;Computing uplifted value for each year &quot;&#xa;            value_uplifts_year, value_distribution_year = self.compute_uplift_df(&quot;UPLIFT_VALUES_TO_COMPUTE&quot;, year)&#xa;            &#xa;        results_uplift_channel = ResultsBayesianUpliftChannel()&#xa;        return results_uplift_channel" id="bgpGDWmcntnncIZ7-7qG-22">
          <mxCell style="text;whiteSpace=wrap;" vertex="1" parent="WIyWlLk6GJQsqaUBKTNV-1">
            <mxGeometry x="1270" y="1150" width="650" height="280" as="geometry" />
          </mxCell>
        </UserObject>
        <mxCell id="bgpGDWmcntnncIZ7-7qG-23" value="&lt;span style=&quot;font-family: Helvetica; font-size: 12px; font-style: normal; font-variant-ligatures: normal; font-variant-caps: normal; font-weight: 400; letter-spacing: normal; orphans: 2; text-align: left; text-indent: 0px; text-transform: none; widows: 2; word-spacing: 0px; -webkit-text-stroke-width: 0px; white-space: normal; background-color: rgb(251, 251, 251); text-decoration-thickness: initial; text-decoration-style: initial; text-decoration-color: initial; float: none; display: inline !important;&quot;&gt;&lt;font color=&quot;#808080&quot;&gt;#&quot;Computing uplifted value for each year &quot;&lt;/font&gt;&lt;/span&gt;" style="text;whiteSpace=wrap;html=1;" vertex="1" parent="WIyWlLk6GJQsqaUBKTNV-1">
          <mxGeometry x="1324" y="1263" width="260" height="40" as="geometry" />
        </mxCell>
        <UserObject label="" link="save_file(&quot;output/features_df.csv&quot;&#xa;save_file(&quot;output/normalized_features_df.csv&quot;&#xa;save_file(&quot;output/region_index_df.csv&quot;" id="bgpGDWmcntnncIZ7-7qG-24">
          <mxCell style="edgeStyle=orthogonalEdgeStyle;rounded=0;orthogonalLoop=1;jettySize=auto;html=1;" edge="1" parent="WIyWlLk6GJQsqaUBKTNV-1">
            <mxGeometry x="-0.0007" relative="1" as="geometry">
              <mxPoint x="1618" y="1281" as="sourcePoint" />
              <mxPoint x="2330" y="790" as="targetPoint" />
              <Array as="points">
                <mxPoint x="1618" y="1270" />
                <mxPoint x="2000" y="1270" />
                <mxPoint x="2000" y="720" />
                <mxPoint x="2330" y="720" />
              </Array>
              <mxPoint as="offset" />
            </mxGeometry>
          </mxCell>
        </UserObject>
        <mxCell id="bgpGDWmcntnncIZ7-7qG-26" value="&lt;div style=&quot;padding-left: 10px;&quot;&gt;&lt;br&gt;&lt;/div&gt;&lt;div style=&quot;padding-left: 10px;&quot;&gt;&lt;br&gt;&lt;/div&gt;&lt;div style=&quot;padding-left: 10px;&quot;&gt;&lt;br&gt;&lt;/div&gt;&lt;div style=&quot;padding-left: 10px;&quot;&gt;&lt;br&gt;&lt;/div&gt;&lt;div style=&quot;padding-left: 10px;&quot;&gt;&lt;br&gt;&lt;/div&gt;&lt;div style=&quot;padding-left: 10px;&quot;&gt;&lt;br&gt;&lt;/div&gt;&lt;div style=&quot;padding-left: 10px;&quot;&gt;&lt;br&gt;&lt;/div&gt;&lt;div style=&quot;padding-left: 10px;&quot;&gt;&lt;br&gt;&lt;/div&gt;&lt;div style=&quot;padding-left: 10px;&quot;&gt;&lt;br&gt;&lt;/div&gt;&lt;div style=&quot;padding-left: 10px;&quot;&gt;&lt;br&gt;&lt;/div&gt;&lt;div style=&quot;padding-left: 10px;&quot;&gt;&lt;br&gt;&lt;/div&gt;&lt;div style=&quot;padding-left: 10px;&quot;&gt;&lt;br&gt;&lt;/div&gt;&lt;div style=&quot;padding-left: 10px;&quot;&gt;&lt;br&gt;&lt;/div&gt;&lt;div style=&quot;padding-left: 10px;&quot;&gt;&lt;br&gt;&lt;/div&gt;&lt;div style=&quot;padding-left: 10px;&quot;&gt;&lt;br&gt;&lt;/div&gt;&lt;blockquote style=&quot;margin: 0 0 0 40px; border: none; padding: 0px;&quot;&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp;value_uplift_df = pd.DataFrame(columns=[...])&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; value_distribution = pd.DataFrame(columns=[...])&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; samples_dict = self.compute_samples_for_uplifts(uplifts, year, is_contrib=is_contrib)&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; for contrib, tp in self.contribs_names.items():&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; value_uplift_df = pd.concat(&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; [&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; value_uplift_df,&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; self.compute_delta_to_null_values(samples_dict[contrib], tp, year, is_contrib),&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; ],&amp;nbsp;&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; )&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; if not is_contrib:&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; for uplift, samples in samples_dict[contrib].items():&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; value_distribution = pd.concat(&lt;span style=&quot;background-color: initial;&quot;&gt;value_distribution,&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; self.compute_distribution_values(samples, uplift, tp, year),&lt;/span&gt;.)&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; return value_uplift_df, value_distribution&lt;/div&gt;&lt;/div&gt;&lt;/blockquote&gt;" style="rounded=1;whiteSpace=wrap;html=1;align=left;" vertex="1" parent="WIyWlLk6GJQsqaUBKTNV-1">
          <mxGeometry x="2110" y="790" width="650" height="550" as="geometry" />
        </mxCell>
        <UserObject label="" link="save_file(&quot;output/features_df.csv&quot;&#xa;save_file(&quot;output/normalized_features_df.csv&quot;&#xa;save_file(&quot;output/region_index_df.csv&quot;" id="bgpGDWmcntnncIZ7-7qG-27">
          <mxCell style="edgeStyle=orthogonalEdgeStyle;rounded=0;orthogonalLoop=1;jettySize=auto;html=1;" edge="1" parent="WIyWlLk6GJQsqaUBKTNV-1">
            <mxGeometry x="-0.0007" relative="1" as="geometry">
              <mxPoint x="1540" y="1200.93" as="sourcePoint" />
              <mxPoint x="2330" y="783" as="targetPoint" />
              <Array as="points">
                <mxPoint x="1540" y="1190" />
                <mxPoint x="2000" y="1190" />
                <mxPoint x="2000" y="720" />
                <mxPoint x="2330" y="720" />
                <mxPoint x="2330" y="787" />
              </Array>
              <mxPoint as="offset" />
            </mxGeometry>
          </mxCell>
        </UserObject>
        <mxCell id="bgpGDWmcntnncIZ7-7qG-28" value="def compute_uplift_df(" style="text;whiteSpace=wrap;fontSize=14;fontColor=#FF8000;" vertex="1" parent="WIyWlLk6GJQsqaUBKTNV-1">
          <mxGeometry x="2170" y="800" width="150" height="40" as="geometry" />
        </mxCell>
        <mxCell id="bgpGDWmcntnncIZ7-7qG-30" value="&lt;div style=&quot;forced-color-adjust: none; padding-left: 10px;&quot;&gt;Performs the computation of delta to null values for all uplifts in 2 steps:&lt;/div&gt;&lt;div style=&quot;forced-color-adjust: none;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; 1. Compute the samples for all the values&lt;/div&gt;&lt;div style=&quot;forced-color-adjust: none;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; 2. Compute delta to null values&lt;/div&gt;&lt;div style=&quot;forced-color-adjust: none;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; 3. Aggregate the results and format them in a dataframe&lt;/div&gt;&lt;div style=&quot;forced-color-adjust: none; padding-left: 10px;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;/div&gt;&lt;div style=&quot;forced-color-adjust: none; padding-left: 10px;&quot;&gt;:param year: Year on which to compute the uplifts&lt;/div&gt;&lt;div style=&quot;forced-color-adjust: none;&quot;&gt;&amp;nbsp; &amp;nbsp;&lt;/div&gt;&lt;div style=&quot;forced-color-adjust: none;&quot;&gt;&amp;nbsp; &amp;nbsp; :return: Two dataframes containing :&lt;/div&gt;&lt;blockquote style=&quot;forced-color-adjust: none; margin: 0px 0px 0px 40px; border: none; padding: 0px;&quot;&gt;&lt;div style=&quot;forced-color-adjust: none;&quot;&gt;a) the delta to null values for all uplifts,&lt;/div&gt;&lt;div style=&quot;forced-color-adjust: none;&quot;&gt;&amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;/div&gt;&lt;div style=&quot;forced-color-adjust: none;&quot;&gt;b) aggregated per year or per year week&lt;/div&gt;&lt;div style=&quot;forced-color-adjust: none;&quot;&gt;&lt;br style=&quot;forced-color-adjust: none; color: rgb(0, 0, 0); font-family: Helvetica; font-size: 12px; font-style: normal; font-variant-ligatures: normal; font-variant-caps: normal; font-weight: 400; letter-spacing: normal; orphans: 2; text-align: left; text-indent: 0px; text-transform: none; widows: 2; word-spacing: 0px; -webkit-text-stroke-width: 0px; white-space: normal; background-color: rgb(251, 251, 251); text-decoration-thickness: initial; text-decoration-style: initial; text-decoration-color: initial;&quot;&gt;&lt;/div&gt;&lt;/blockquote&gt;" style="text;whiteSpace=wrap;html=1;fillColor=#dae8fc;strokeColor=#6c8ebf;" vertex="1" parent="WIyWlLk6GJQsqaUBKTNV-1">
          <mxGeometry x="2160" y="850" width="420" height="200" as="geometry" />
        </mxCell>
        <mxCell id="bgpGDWmcntnncIZ7-7qG-32" value="" style="edgeStyle=segmentEdgeStyle;endArrow=classic;html=1;curved=0;rounded=0;endSize=8;startSize=8;" edge="1" parent="WIyWlLk6GJQsqaUBKTNV-1">
          <mxGeometry width="50" height="50" relative="1" as="geometry">
            <mxPoint x="2380" y="1110" as="sourcePoint" />
            <mxPoint x="3150" y="790" as="targetPoint" />
            <Array as="points">
              <mxPoint x="2380" y="1090" />
              <mxPoint x="2830" y="1090" />
              <mxPoint x="2830" y="730" />
              <mxPoint x="3150" y="730" />
            </Array>
          </mxGeometry>
        </mxCell>
        <mxCell id="bgpGDWmcntnncIZ7-7qG-35" value="&lt;span style=&quot;font-family: __styreneB_5d855b, __styreneB_Fallback_5d855b, ui-sans-serif, system-ui, -apple-system, &amp;quot;system-ui&amp;quot;, &amp;quot;Segoe UI&amp;quot;, Roboto, &amp;quot;Helvetica Neue&amp;quot;, Arial, &amp;quot;Noto Sans&amp;quot;, sans-serif, &amp;quot;Apple Color Emoji&amp;quot;, &amp;quot;Segoe UI Emoji&amp;quot;, &amp;quot;Segoe UI Symbol&amp;quot;, &amp;quot;Noto Color Emoji&amp;quot;; font-size: 15px; font-style: normal; font-variant-ligatures: normal; font-variant-caps: normal; font-weight: 400; letter-spacing: -0.4px; orphans: 2; text-align: start; text-indent: 0px; text-transform: none; widows: 2; word-spacing: 0px; -webkit-text-stroke-width: 0px; white-space: pre-wrap; text-decoration-thickness: initial; text-decoration-style: initial; text-decoration-color: initial; float: none; display: inline !important;&quot;&gt;&lt;font color=&quot;#ff8000&quot;&gt;def compute_samples_for_uplifts(&lt;/font&gt;&lt;/span&gt;" style="text;whiteSpace=wrap;html=1;" vertex="1" parent="WIyWlLk6GJQsqaUBKTNV-1">
          <mxGeometry x="2960" y="820" width="260" height="40" as="geometry" />
        </mxCell>
        <mxCell id="bgpGDWmcntnncIZ7-7qG-41" value="" style="edgeStyle=orthogonalEdgeStyle;rounded=0;orthogonalLoop=1;jettySize=auto;html=1;" edge="1" parent="WIyWlLk6GJQsqaUBKTNV-1" source="bgpGDWmcntnncIZ7-7qG-39" target="bgpGDWmcntnncIZ7-7qG-40">
          <mxGeometry relative="1" as="geometry" />
        </mxCell>
        <mxCell id="bgpGDWmcntnncIZ7-7qG-39" value="initialize : final samples&amp;nbsp; AND final_features&amp;nbsp;" style="rounded=0;whiteSpace=wrap;html=1;" vertex="1" parent="WIyWlLk6GJQsqaUBKTNV-1">
          <mxGeometry x="3030" y="879" width="270" height="60" as="geometry" />
        </mxCell>
        <mxCell id="bgpGDWmcntnncIZ7-7qG-43" value="" style="edgeStyle=orthogonalEdgeStyle;rounded=0;orthogonalLoop=1;jettySize=auto;html=1;" edge="1" parent="WIyWlLk6GJQsqaUBKTNV-1" source="bgpGDWmcntnncIZ7-7qG-40" target="bgpGDWmcntnncIZ7-7qG-42">
          <mxGeometry relative="1" as="geometry" />
        </mxCell>
        <mxCell id="bgpGDWmcntnncIZ7-7qG-40" value="define&amp;nbsp; parellelized function for computing uplift samples&amp;nbsp;" style="rounded=0;whiteSpace=wrap;html=1;" vertex="1" parent="WIyWlLk6GJQsqaUBKTNV-1">
          <mxGeometry x="3030" y="980" width="270" height="60" as="geometry" />
        </mxCell>
        <mxCell id="bgpGDWmcntnncIZ7-7qG-45" value="" style="edgeStyle=orthogonalEdgeStyle;rounded=0;orthogonalLoop=1;jettySize=auto;html=1;" edge="1" parent="WIyWlLk6GJQsqaUBKTNV-1" source="bgpGDWmcntnncIZ7-7qG-42" target="bgpGDWmcntnncIZ7-7qG-44">
          <mxGeometry relative="1" as="geometry" />
        </mxCell>
        <mxCell id="bgpGDWmcntnncIZ7-7qG-42" value="set up multi processing" style="whiteSpace=wrap;html=1;rounded=0;" vertex="1" parent="WIyWlLk6GJQsqaUBKTNV-1">
          <mxGeometry x="3030" y="1060" width="270" height="60" as="geometry" />
        </mxCell>
        <mxCell id="bgpGDWmcntnncIZ7-7qG-44" value="" style="whiteSpace=wrap;html=1;rounded=0;fillColor=#e1d5e7;strokeColor=#9673a6;" vertex="1" parent="WIyWlLk6GJQsqaUBKTNV-1">
          <mxGeometry x="3010" y="1150" width="320" height="270" as="geometry" />
        </mxCell>
        <mxCell id="bgpGDWmcntnncIZ7-7qG-46" value="&lt;span style=&quot;color: rgb(0, 0, 0); font-family: Helvetica; font-size: 12px; font-style: normal; font-variant-ligatures: normal; font-variant-caps: normal; font-weight: 400; letter-spacing: normal; orphans: 2; text-align: center; text-indent: 0px; text-transform: none; widows: 2; word-spacing: 0px; -webkit-text-stroke-width: 0px; white-space: normal; background-color: rgb(251, 251, 251); text-decoration-thickness: initial; text-decoration-style: initial; text-decoration-color: initial; display: inline !important; float: none;&quot;&gt;Parallelized Process&lt;/span&gt;" style="text;whiteSpace=wrap;html=1;" vertex="1" parent="WIyWlLk6GJQsqaUBKTNV-1">
          <mxGeometry x="3030" y="1130" width="160" height="40" as="geometry" />
        </mxCell>
        <mxCell id="bgpGDWmcntnncIZ7-7qG-47" value="" style="endArrow=classic;html=1;rounded=0;exitX=0.5;exitY=1;exitDx=0;exitDy=0;" edge="1" parent="WIyWlLk6GJQsqaUBKTNV-1" source="bgpGDWmcntnncIZ7-7qG-48">
          <mxGeometry width="50" height="50" relative="1" as="geometry">
            <mxPoint x="3150" y="1160" as="sourcePoint" />
            <mxPoint x="3165" y="1192" as="targetPoint" />
          </mxGeometry>
        </mxCell>
        <mxCell id="bgpGDWmcntnncIZ7-7qG-49" value="" style="endArrow=classic;html=1;rounded=0;exitX=0.5;exitY=1;exitDx=0;exitDy=0;" edge="1" parent="WIyWlLk6GJQsqaUBKTNV-1" source="bgpGDWmcntnncIZ7-7qG-42" target="bgpGDWmcntnncIZ7-7qG-48">
          <mxGeometry width="50" height="50" relative="1" as="geometry">
            <mxPoint x="3165" y="1120" as="sourcePoint" />
            <mxPoint x="3165" y="1192" as="targetPoint" />
          </mxGeometry>
        </mxCell>
        <mxCell id="bgpGDWmcntnncIZ7-7qG-51" value="" style="edgeStyle=orthogonalEdgeStyle;rounded=0;orthogonalLoop=1;jettySize=auto;html=1;exitX=0.407;exitY=0.269;exitDx=0;exitDy=0;exitPerimeter=0;" edge="1" parent="WIyWlLk6GJQsqaUBKTNV-1" source="bgpGDWmcntnncIZ7-7qG-44" target="bgpGDWmcntnncIZ7-7qG-50">
          <mxGeometry relative="1" as="geometry">
            <Array as="points">
              <mxPoint x="3090" y="1220" />
            </Array>
          </mxGeometry>
        </mxCell>
        <mxCell id="bgpGDWmcntnncIZ7-7qG-63" value="" style="edgeStyle=orthogonalEdgeStyle;rounded=0;orthogonalLoop=1;jettySize=auto;html=1;" edge="1" parent="WIyWlLk6GJQsqaUBKTNV-1" source="bgpGDWmcntnncIZ7-7qG-48" target="bgpGDWmcntnncIZ7-7qG-62">
          <mxGeometry relative="1" as="geometry" />
        </mxCell>
        <mxCell id="bgpGDWmcntnncIZ7-7qG-48" value="for each&amp;nbsp;&lt;div&gt;uplift&lt;/div&gt;" style="rhombus;whiteSpace=wrap;html=1;" vertex="1" parent="WIyWlLk6GJQsqaUBKTNV-1">
          <mxGeometry x="3125" y="1160" width="80" height="80" as="geometry" />
        </mxCell>
        <mxCell id="bgpGDWmcntnncIZ7-7qG-53" value="" style="edgeStyle=orthogonalEdgeStyle;rounded=0;orthogonalLoop=1;jettySize=auto;html=1;" edge="1" parent="WIyWlLk6GJQsqaUBKTNV-1" source="bgpGDWmcntnncIZ7-7qG-50" target="bgpGDWmcntnncIZ7-7qG-52">
          <mxGeometry relative="1" as="geometry" />
        </mxCell>
        <mxCell id="bgpGDWmcntnncIZ7-7qG-50" value="compute uplifted features" style="whiteSpace=wrap;html=1;" vertex="1" parent="WIyWlLk6GJQsqaUBKTNV-1">
          <mxGeometry x="3030" y="1240" width="110" height="30" as="geometry" />
        </mxCell>
        <mxCell id="bgpGDWmcntnncIZ7-7qG-52" value="create uplift datadict" style="whiteSpace=wrap;html=1;" vertex="1" parent="WIyWlLk6GJQsqaUBKTNV-1">
          <mxGeometry x="3030" y="1280" width="110" height="30" as="geometry" />
        </mxCell>
        <mxCell id="bgpGDWmcntnncIZ7-7qG-57" value="" style="edgeStyle=orthogonalEdgeStyle;rounded=0;orthogonalLoop=1;jettySize=auto;html=1;" edge="1" parent="WIyWlLk6GJQsqaUBKTNV-1" source="bgpGDWmcntnncIZ7-7qG-54" target="bgpGDWmcntnncIZ7-7qG-56">
          <mxGeometry relative="1" as="geometry" />
        </mxCell>
        <mxCell id="bgpGDWmcntnncIZ7-7qG-54" value="Generate quantities (stan model)" style="whiteSpace=wrap;html=1;fillColor=#d5e8d4;strokeColor=#82b366;" vertex="1" parent="WIyWlLk6GJQsqaUBKTNV-1">
          <mxGeometry x="3030" y="1320" width="110" height="30" as="geometry" />
        </mxCell>
        <mxCell id="bgpGDWmcntnncIZ7-7qG-59" value="" style="edgeStyle=orthogonalEdgeStyle;rounded=0;orthogonalLoop=1;jettySize=auto;html=1;" edge="1" parent="WIyWlLk6GJQsqaUBKTNV-1" source="bgpGDWmcntnncIZ7-7qG-56" target="bgpGDWmcntnncIZ7-7qG-58">
          <mxGeometry relative="1" as="geometry" />
        </mxCell>
        <mxCell id="bgpGDWmcntnncIZ7-7qG-56" value="process and denormalize Samples" style="whiteSpace=wrap;html=1;" vertex="1" parent="WIyWlLk6GJQsqaUBKTNV-1">
          <mxGeometry x="3030" y="1360" width="110" height="50" as="geometry" />
        </mxCell>
        <mxCell id="bgpGDWmcntnncIZ7-7qG-61" value="" style="edgeStyle=orthogonalEdgeStyle;rounded=0;orthogonalLoop=1;jettySize=auto;html=1;entryX=1;entryY=1;entryDx=0;entryDy=0;" edge="1" parent="WIyWlLk6GJQsqaUBKTNV-1" source="bgpGDWmcntnncIZ7-7qG-58" target="bgpGDWmcntnncIZ7-7qG-48">
          <mxGeometry relative="1" as="geometry" />
        </mxCell>
        <mxCell id="bgpGDWmcntnncIZ7-7qG-58" value="store results&lt;div&gt;SAMPLES_DICT&lt;/div&gt;&lt;div&gt;and&lt;/div&gt;&lt;div&gt;FEATURES_DICT&lt;/div&gt;" style="whiteSpace=wrap;html=1;" vertex="1" parent="WIyWlLk6GJQsqaUBKTNV-1">
          <mxGeometry x="3190" y="1290" width="110" height="100" as="geometry" />
        </mxCell>
        <mxCell id="bgpGDWmcntnncIZ7-7qG-65" value="" style="edgeStyle=orthogonalEdgeStyle;rounded=0;orthogonalLoop=1;jettySize=auto;html=1;" edge="1" parent="WIyWlLk6GJQsqaUBKTNV-1" source="bgpGDWmcntnncIZ7-7qG-62" target="bgpGDWmcntnncIZ7-7qG-64">
          <mxGeometry relative="1" as="geometry" />
        </mxCell>
        <mxCell id="bgpGDWmcntnncIZ7-7qG-62" value="merge results&amp;nbsp;&lt;div&gt;into a dict&lt;/div&gt;" style="rounded=1;whiteSpace=wrap;html=1;" vertex="1" parent="WIyWlLk6GJQsqaUBKTNV-1">
          <mxGeometry x="3360" y="1170" width="120" height="60" as="geometry" />
        </mxCell>
        <mxCell id="bgpGDWmcntnncIZ7-7qG-64" value="return dict" style="rounded=1;whiteSpace=wrap;html=1;" vertex="1" parent="WIyWlLk6GJQsqaUBKTNV-1">
          <mxGeometry x="3360" y="1310" width="120" height="60" as="geometry" />
        </mxCell>
        <mxCell id="bgpGDWmcntnncIZ7-7qG-66" value="&lt;code class=&quot;bg-text-200/5 border border-0.5 border-border-300 text-danger-000 whitespace-pre-wrap rounded-[0.3rem] px-1 py-px text-[0.9rem]&quot;&gt;generate_quantities computes&amp;nbsp;&lt;/code&gt;additional quantities of interest based on the fitted model parameters and data, without affecting the posterior distribution&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;is like predict but for probabilistic dist not point estimate&lt;/div&gt;" style="text;html=1;align=center;verticalAlign=middle;whiteSpace=wrap;rounded=0;fillColor=#dae8fc;strokeColor=#6c8ebf;" vertex="1" parent="WIyWlLk6GJQsqaUBKTNV-1">
          <mxGeometry x="3390" y="894" width="180" height="186" as="geometry" />
        </mxCell>
        <mxCell id="bgpGDWmcntnncIZ7-7qG-68" value="" style="edgeStyle=orthogonalEdgeStyle;rounded=0;orthogonalLoop=1;jettySize=auto;html=1;entryX=0;entryY=0.316;entryDx=0;entryDy=0;entryPerimeter=0;" edge="1" parent="WIyWlLk6GJQsqaUBKTNV-1" target="bgpGDWmcntnncIZ7-7qG-69">
          <mxGeometry relative="1" as="geometry">
            <mxPoint x="2379" y="1178" as="sourcePoint" />
            <mxPoint x="3085" y="1320" as="targetPoint" />
            <Array as="points">
              <mxPoint x="2379" y="1160" />
              <mxPoint x="2800" y="1160" />
              <mxPoint x="2800" y="1852" />
            </Array>
          </mxGeometry>
        </mxCell>
        <mxCell id="bgpGDWmcntnncIZ7-7qG-67" value="" style="shape=image;verticalLabelPosition=bottom;labelBackgroundColor=default;verticalAlign=top;aspect=fixed;imageAspect=0;image=data:image/png,;" vertex="1" parent="WIyWlLk6GJQsqaUBKTNV-1">
          <mxGeometry x="3057" y="1720" width="376" height="1124" as="geometry" />
        </mxCell>
        <mxCell id="bgpGDWmcntnncIZ7-7qG-70" value="&lt;span style=&quot;font-family: Helvetica; font-style: normal; font-variant-ligatures: normal; font-variant-caps: normal; font-weight: 400; letter-spacing: normal; orphans: 2; text-align: left; text-indent: 0px; text-transform: none; widows: 2; word-spacing: 0px; -webkit-text-stroke-width: 0px; white-space: normal; background-color: rgb(251, 251, 251); text-decoration-thickness: initial; text-decoration-style: initial; text-decoration-color: initial; float: none; display: inline !important;&quot;&gt;&lt;font style=&quot;font-size: 16px;&quot; color=&quot;#ff8000&quot;&gt;.compute_delta_to_null_values&lt;/font&gt;&lt;/span&gt;" style="text;whiteSpace=wrap;html=1;" vertex="1" parent="WIyWlLk6GJQsqaUBKTNV-1">
          <mxGeometry x="3010" y="1520" width="200" height="40" as="geometry" />
        </mxCell>
        <mxCell id="bgpGDWmcntnncIZ7-7qG-71" value="Computes the delta to null values statistics aggregated on a full year from the samples&#xa;        :param samples_dict: dictionary containing the samples for all uplift values for a touchpoint.&#xa;        Expected dimension is for each array n_iter x n_months&#xa;        :param tp: touchpoint of interest&#xa;        :param year: year of interest&#xa;        :param is_contrib: computing contribution or uplift&#xa;        :return: Dataframe containing the delta to null value statistics for the considered year&#xa;        &quot;&quot;&quot;" style="text;whiteSpace=wrap;fillColor=#dae8fc;strokeColor=#6c8ebf;" vertex="1" parent="WIyWlLk6GJQsqaUBKTNV-1">
          <mxGeometry x="3030" y="1560" width="560" height="140" as="geometry" />
        </mxCell>
      </root>
    </mxGraphModel>
  </diagram>
</mxfile>
