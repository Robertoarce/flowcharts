<mxfile host="app.diagrams.net" agent="Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/128.0.0.0 Safari/537.36" version="24.7.14">
  <diagram id="C5RBs43oDa-KdzZeNtuy" name="Page-1">
    <mxGraphModel dx="1106" dy="2735" grid="1" gridSize="10" guides="1" tooltips="1" connect="1" arrows="1" fold="1" page="1" pageScale="1" pageWidth="20000" pageHeight="2000" math="0" shadow="0">
      <root>
        <mxCell id="WIyWlLk6GJQsqaUBKTNV-0" />
        <mxCell id="WIyWlLk6GJQsqaUBKTNV-1" parent="WIyWlLk6GJQsqaUBKTNV-0" />
        <mxCell id="bgpGDWmcntnncIZ7-7qG-75" value="" style="rounded=1;whiteSpace=wrap;html=1;" vertex="1" parent="WIyWlLk6GJQsqaUBKTNV-1">
          <mxGeometry x="2040" y="1450" width="630" height="1390" as="geometry" />
        </mxCell>
        <mxCell id="bgpGDWmcntnncIZ7-7qG-69" value="" style="rounded=0;whiteSpace=wrap;html=1;" vertex="1" parent="WIyWlLk6GJQsqaUBKTNV-1">
          <mxGeometry x="2930" y="1470" width="660" height="1470" as="geometry" />
        </mxCell>
        <mxCell id="bgpGDWmcntnncIZ7-7qG-33" value="" style="shape=ext;double=1;rounded=1;whiteSpace=wrap;html=1;" vertex="1" parent="WIyWlLk6GJQsqaUBKTNV-1">
          <mxGeometry x="2870" y="790" width="730" height="670" as="geometry" />
        </mxCell>
        <mxCell id="bgpGDWmcntnncIZ7-7qG-19" value="" style="rounded=1;whiteSpace=wrap;html=1;" vertex="1" parent="WIyWlLk6GJQsqaUBKTNV-1">
          <mxGeometry x="1210" y="820" width="760" height="630" as="geometry" />
        </mxCell>
        <mxCell id="bgpGDWmcntnncIZ7-7qG-4" value="" style="rounded=1;whiteSpace=wrap;html=1;" vertex="1" parent="WIyWlLk6GJQsqaUBKTNV-1">
          <mxGeometry x="1110" y="81" width="560" height="590" as="geometry" />
        </mxCell>
        <mxCell id="fa4uJrr_QhnZvR9-6Muc-73" value="" style="rounded=1;whiteSpace=wrap;html=1;" parent="WIyWlLk6GJQsqaUBKTNV-1" vertex="1">
          <mxGeometry x="1740" y="-290" width="600" height="941" as="geometry" />
        </mxCell>
        <mxCell id="WIyWlLk6GJQsqaUBKTNV-2" value="" style="rounded=0;html=1;jettySize=auto;orthogonalLoop=1;fontSize=11;endArrow=block;endFill=0;endSize=8;strokeWidth=1;shadow=0;labelBackgroundColor=none;edgeStyle=orthogonalEdgeStyle;" parent="WIyWlLk6GJQsqaUBKTNV-1" source="WIyWlLk6GJQsqaUBKTNV-3" target="WIyWlLk6GJQsqaUBKTNV-6" edge="1">
          <mxGeometry relative="1" as="geometry" />
        </mxCell>
        <mxCell id="WIyWlLk6GJQsqaUBKTNV-3" value="gets configs&lt;div&gt;pipeline classes&lt;/div&gt;&lt;div&gt;runs the pipeline&lt;/div&gt;" style="rounded=1;whiteSpace=wrap;html=1;fontSize=12;glass=0;strokeWidth=1;shadow=0;" parent="WIyWlLk6GJQsqaUBKTNV-1" vertex="1">
          <mxGeometry x="160" y="79" width="120" height="70" as="geometry" />
        </mxCell>
        <mxCell id="fa4uJrr_QhnZvR9-6Muc-9" value="" style="edgeStyle=orthogonalEdgeStyle;rounded=0;orthogonalLoop=1;jettySize=auto;html=1;" parent="WIyWlLk6GJQsqaUBKTNV-1" source="WIyWlLk6GJQsqaUBKTNV-6" target="WIyWlLk6GJQsqaUBKTNV-7" edge="1">
          <mxGeometry relative="1" as="geometry">
            <Array as="points">
              <mxPoint x="220" y="329" />
              <mxPoint x="310" y="329" />
            </Array>
          </mxGeometry>
        </mxCell>
        <mxCell id="WIyWlLk6GJQsqaUBKTNV-6" value="Which&lt;div&gt;&amp;nbsp;pipeline?&amp;nbsp;&lt;/div&gt;" style="rhombus;whiteSpace=wrap;html=1;shadow=0;fontFamily=Helvetica;fontSize=12;align=center;strokeWidth=1;spacing=6;spacingTop=-4;" parent="WIyWlLk6GJQsqaUBKTNV-1" vertex="1">
          <mxGeometry x="170" y="189" width="100" height="80" as="geometry" />
        </mxCell>
        <mxCell id="WIyWlLk6GJQsqaUBKTNV-7" value="" style="rounded=1;whiteSpace=wrap;html=1;fontSize=12;glass=0;strokeWidth=1;shadow=0;" parent="WIyWlLk6GJQsqaUBKTNV-1" vertex="1">
          <mxGeometry x="120" y="389" width="300" height="530" as="geometry" />
        </mxCell>
        <mxCell id="fa4uJrr_QhnZvR9-6Muc-4" value="RUN.py" style="text;html=1;align=center;verticalAlign=middle;whiteSpace=wrap;rounded=0;" parent="WIyWlLk6GJQsqaUBKTNV-1" vertex="1">
          <mxGeometry x="160" y="49" width="60" height="30" as="geometry" />
        </mxCell>
        <mxCell id="fa4uJrr_QhnZvR9-6Muc-8" value="&lt;font style=&quot;forced-color-adjust: none; color: rgb(0, 0, 0); font-family: Helvetica; font-style: normal; font-variant-ligatures: normal; font-variant-caps: normal; font-weight: 400; letter-spacing: normal; orphans: 2; text-align: center; text-indent: 0px; text-transform: none; widows: 2; word-spacing: 0px; -webkit-text-stroke-width: 0px; white-space: normal; background-color: rgb(251, 251, 251); text-decoration-thickness: initial; text-decoration-style: initial; text-decoration-color: initial; font-size: 16px;&quot;&gt;ResponseModelPipeline&lt;/font&gt;&lt;div style=&quot;forced-color-adjust: none; color: rgb(0, 0, 0); font-family: Helvetica; font-size: 12px; font-style: normal; font-variant-ligatures: normal; font-variant-caps: normal; font-weight: 400; letter-spacing: normal; orphans: 2; text-align: center; text-indent: 0px; text-transform: none; widows: 2; word-spacing: 0px; -webkit-text-stroke-width: 0px; white-space: normal; background-color: rgb(251, 251, 251); text-decoration-thickness: initial; text-decoration-style: initial; text-decoration-color: initial;&quot;&gt;&lt;div style=&quot;forced-color-adjust: none; text-align: left;&quot;&gt;&lt;span style=&quot;forced-color-adjust: none; white-space: pre;&quot;&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;div style=&quot;forced-color-adjust: none; text-align: left;&quot;&gt;&lt;span style=&quot;forced-color-adjust: none; white-space: pre;&quot;&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;/span&gt;- Load + Preprocess/clean data&lt;/div&gt;&lt;div style=&quot;forced-color-adjust: none; text-align: left;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; - Data grain via regression: Brick -&amp;gt; HCP&lt;/div&gt;&lt;div style=&quot;forced-color-adjust: none; text-align: left;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; - Feature engineering (feature builders)&lt;/div&gt;&lt;div style=&quot;forced-color-adjust: none; text-align: left;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; - Bayesian Response model&lt;/div&gt;&lt;div style=&quot;forced-color-adjust: none; text-align: left;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; - Post processing&lt;/div&gt;&lt;div style=&quot;forced-color-adjust: none; text-align: left;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; - Save outputs&lt;/div&gt;&lt;/div&gt;" style="text;whiteSpace=wrap;html=1;" parent="WIyWlLk6GJQsqaUBKTNV-1" vertex="1">
          <mxGeometry x="134" y="419" width="280" height="140" as="geometry" />
        </mxCell>
        <mxCell id="fa4uJrr_QhnZvR9-6Muc-11" value="__INIT__" style="text;html=1;align=center;verticalAlign=middle;whiteSpace=wrap;rounded=0;" parent="WIyWlLk6GJQsqaUBKTNV-1" vertex="1">
          <mxGeometry x="150" y="584" width="60" height="30" as="geometry" />
        </mxCell>
        <mxCell id="fa4uJrr_QhnZvR9-6Muc-12" value="&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;- gets congfigs&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;- starts :&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;a) data_manager&lt;/div&gt;&lt;div&gt;b) experiment_tracker&lt;/div&gt;" style="text;html=1;align=left;verticalAlign=middle;whiteSpace=wrap;rounded=0;" parent="WIyWlLk6GJQsqaUBKTNV-1" vertex="1">
          <mxGeometry x="150" y="614" width="140" height="75" as="geometry" />
        </mxCell>
        <mxCell id="fa4uJrr_QhnZvR9-6Muc-16" value="&lt;font style=&quot;font-size: 16px;&quot;&gt;__call__():&lt;/font&gt;&lt;div&gt;&lt;font style=&quot;font-size: 12px;&quot;&gt;&lt;br&gt;&lt;/font&gt;&lt;/div&gt;&lt;div&gt;&lt;font style=&quot;font-size: 12px;&quot;&gt;&lt;br&gt;&lt;/font&gt;&lt;/div&gt;&lt;div&gt;&lt;font style=&quot;font-size: 12px;&quot;&gt;self.data_loading&amp;nbsp;&lt;/font&gt;&lt;/div&gt;&lt;div&gt;&lt;font style=&quot;font-size: 12px;&quot;&gt;&lt;br&gt;&lt;/font&gt;&lt;/div&gt;&lt;div&gt;&lt;font style=&quot;font-size: 12px;&quot;&gt;self.update_data_dict_with_missing_levels()&lt;/font&gt;&lt;/div&gt;&lt;div&gt;&lt;font style=&quot;font-size: 12px;&quot;&gt;&lt;br&gt;&lt;/font&gt;&lt;/div&gt;&lt;div&gt;&lt;font style=&quot;&quot;&gt;&lt;div style=&quot;&quot;&gt;result_df = self.generate_response_curve()&lt;/div&gt;&lt;div style=&quot;&quot;&gt;&lt;br&gt;&lt;/div&gt;&lt;div style=&quot;&quot;&gt;self.save_results(result_df)&lt;/div&gt;&lt;/font&gt;&lt;/div&gt;" style="text;html=1;align=left;verticalAlign=middle;whiteSpace=wrap;rounded=0;" parent="WIyWlLk6GJQsqaUBKTNV-1" vertex="1">
          <mxGeometry x="150" y="719" width="260" height="160" as="geometry" />
        </mxCell>
        <mxCell id="fa4uJrr_QhnZvR9-6Muc-17" value="&lt;font style=&quot;font-size: 19px;&quot;&gt;run_pipeline.py&lt;/font&gt;" style="text;html=1;align=center;verticalAlign=middle;whiteSpace=wrap;rounded=0;" parent="WIyWlLk6GJQsqaUBKTNV-1" vertex="1">
          <mxGeometry x="200" y="359" width="60" height="30" as="geometry" />
        </mxCell>
        <mxCell id="fa4uJrr_QhnZvR9-6Muc-56" value="" style="rounded=1;whiteSpace=wrap;html=1;" parent="WIyWlLk6GJQsqaUBKTNV-1" vertex="1">
          <mxGeometry x="540" y="339" width="420" height="350" as="geometry" />
        </mxCell>
        <mxCell id="fa4uJrr_QhnZvR9-6Muc-57" value="generate_response_curve" style="text;whiteSpace=wrap;fontSize=16;fontColor=#33FFC9;" parent="WIyWlLk6GJQsqaUBKTNV-1" vertex="1">
          <mxGeometry x="562.5" y="359" width="270" height="40" as="geometry" />
        </mxCell>
        <UserObject label="" link="save_file(&quot;output/features_df.csv&quot;&#xa;save_file(&quot;output/normalized_features_df.csv&quot;&#xa;save_file(&quot;output/region_index_df.csv&quot;" id="fa4uJrr_QhnZvR9-6Muc-61">
          <mxCell style="edgeStyle=orthogonalEdgeStyle;rounded=0;orthogonalLoop=1;jettySize=auto;html=1;entryX=0.5;entryY=0;entryDx=0;entryDy=0;" parent="WIyWlLk6GJQsqaUBKTNV-1" target="fa4uJrr_QhnZvR9-6Muc-56" edge="1">
            <mxGeometry x="-0.0007" relative="1" as="geometry">
              <mxPoint x="397" y="838" as="sourcePoint" />
              <mxPoint x="320" y="399" as="targetPoint" />
              <Array as="points">
                <mxPoint x="480" y="838" />
                <mxPoint x="480" y="289" />
                <mxPoint x="698" y="289" />
              </Array>
              <mxPoint as="offset" />
            </mxGeometry>
          </mxCell>
        </UserObject>
        <mxCell id="fa4uJrr_QhnZvR9-6Muc-62" value="print_preprocessing_plots (plots )&lt;div&gt;print_correlations.&amp;nbsp; (plots heatmaps)&lt;br&gt;&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;response = self.bayesian_modeling()&lt;br&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;lambda_adstocks[channel_code] = response[1]&lt;/span&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;= StanUpliftComputation (CLASS)&lt;/div&gt;&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;rsp_model_op = ResponseModelOutput()&lt;br&gt;&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;&amp;nbsp;rsp_response = rsp_model_op.run()&lt;br&gt;&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;return result_df&lt;br&gt;&lt;/div&gt;" style="text;html=1;align=left;verticalAlign=middle;whiteSpace=wrap;rounded=0;" parent="WIyWlLk6GJQsqaUBKTNV-1" vertex="1">
          <mxGeometry x="547.5" y="389" width="300" height="270" as="geometry" />
        </mxCell>
        <mxCell id="fa4uJrr_QhnZvR9-6Muc-64" value="" style="rounded=1;whiteSpace=wrap;html=1;" parent="WIyWlLk6GJQsqaUBKTNV-1" vertex="1">
          <mxGeometry x="1100" y="-290" width="450" height="260" as="geometry" />
        </mxCell>
        <UserObject label="  &#xa;response = run_bayesian_model. &#xa;     (  from all_channel_features df, gets :&#xa;          features_df,        normalized_features_df,&#xa;          transformation_params,&#xa;          channel_code  )&#xa;&#xa;&#xa;&#xa;&#xa;&#xa;&#xa;&#xa;     &#xa; return response" link="response = run_bayesian_model(&#xa;            all_channel_features[channel_code].features_df,&#xa;            all_channel_features[channel_code].normalized_features_df,&#xa;            all_channel_features[channel_code].transformation_params,&#xa;            all_channel_features[channel_code].channel_code,&#xa;            self.config,&#xa;            self.experiment_tracker,&#xa;            level,&#xa;        )&#xa;&#xa;&#xa;        save_file(&#xa;            data=all_channel_features[channel_code].features_df,&#xa;            file_name=f&#39;{&quot;output/features_df.csv&quot;}&#39;,&#xa;            experiment_tracker=self.experiment_tracker,&#xa;            mlflow_directory=channel_code&#xa;            if level is None&#xa;            else osp.join(level[&quot;speciality&quot;], level[&quot;segment_code&quot;], level[&quot;segment_value&quot;]),&#xa;        )&#xa;        save_file(&#xa;            data=all_channel_features[channel_code].normalized_features_df,&#xa;            file_name=f&#39;{&quot;output/normalized_features_df.csv&quot;}&#39;,&#xa;            experiment_tracker=self.experiment_tracker,&#xa;            mlflow_directory=channel_code&#xa;            if level is None&#xa;            else osp.join(level[&quot;speciality&quot;], level[&quot;segment_code&quot;], level[&quot;segment_value&quot;]),&#xa;        )&#xa;        save_file(&#xa;            data=response[0].region_index_df,&#xa;            file_name=f&#39;{&quot;output/region_index_df.csv&quot;}&#39;,&#xa;            experiment_tracker=self.experiment_tracker,&#xa;            mlflow_directory=channel_code&#xa;            if level is None&#xa;            else osp.join(level[&quot;speciality&quot;], level[&quot;segment_code&quot;], level[&quot;segment_value&quot;]),&#xa;        )&#xa;        return response" id="fa4uJrr_QhnZvR9-6Muc-63">
          <mxCell style="text;whiteSpace=wrap;" parent="WIyWlLk6GJQsqaUBKTNV-1" vertex="1">
            <mxGeometry x="1160" y="-270" width="380" height="240" as="geometry" />
          </mxCell>
        </UserObject>
        <UserObject label="" id="fa4uJrr_QhnZvR9-6Muc-66">
          <mxCell style="edgeStyle=orthogonalEdgeStyle;rounded=0;orthogonalLoop=1;jettySize=auto;html=1;entryX=0.5;entryY=0;entryDx=0;entryDy=0;exitX=0.708;exitY=0.222;exitDx=0;exitDy=0;exitPerimeter=0;" parent="WIyWlLk6GJQsqaUBKTNV-1" source="fa4uJrr_QhnZvR9-6Muc-62" target="fa4uJrr_QhnZvR9-6Muc-64" edge="1">
            <mxGeometry x="-0.0007" relative="1" as="geometry">
              <mxPoint x="850" y="779" as="sourcePoint" />
              <mxPoint x="1240.5" y="429.47" as="targetPoint" />
              <Array as="points">
                <mxPoint x="850" y="449" />
                <mxPoint x="850" y="-360" />
                <mxPoint x="1325" y="-360" />
              </Array>
              <mxPoint as="offset" />
            </mxGeometry>
          </mxCell>
        </UserObject>
        <mxCell id="fa4uJrr_QhnZvR9-6Muc-68" value=" &#xa; Function that fits and generate relevant predictions with the bayesian model&#xa;&#xa;    Returns:&#xa;        - samples_full_df: df with the samples of all relevant parameters from the  bayesian model, which are needed in the response curve generation&#xa;&#xa;&#xa;        - bayesian_model_indexes (MappingIndexes): in the bayesian model&#xa;        code to the corresponding business values &#xa;&#xa;&#xa;&#xa;&#xa;&#xa;" style="text;whiteSpace=wrap;" parent="WIyWlLk6GJQsqaUBKTNV-1" vertex="1">
          <mxGeometry x="1780" y="-190" width="400" height="191" as="geometry" />
        </mxCell>
        <UserObject label="src/response_curve/modeling.py" link="src/response_curve/modeling.py" id="fa4uJrr_QhnZvR9-6Muc-69">
          <mxCell style="text;whiteSpace=wrap;" parent="WIyWlLk6GJQsqaUBKTNV-1" vertex="1">
            <mxGeometry x="1760" y="-320" width="210" height="40" as="geometry" />
          </mxCell>
        </UserObject>
        <mxCell id="fa4uJrr_QhnZvR9-6Muc-70" value="&lt;font style=&quot;font-size: 19px;&quot;&gt;run_pipeline.py&lt;/font&gt;" style="text;html=1;align=center;verticalAlign=middle;whiteSpace=wrap;rounded=0;" parent="WIyWlLk6GJQsqaUBKTNV-1" vertex="1">
          <mxGeometry x="590" y="309" width="60" height="30" as="geometry" />
        </mxCell>
        <mxCell id="fa4uJrr_QhnZvR9-6Muc-71" value="&lt;font style=&quot;font-size: 19px;&quot;&gt;run_pipeline.py&lt;/font&gt;" style="text;html=1;align=center;verticalAlign=middle;whiteSpace=wrap;rounded=0;" parent="WIyWlLk6GJQsqaUBKTNV-1" vertex="1">
          <mxGeometry x="1190" y="-320" width="60" height="30" as="geometry" />
        </mxCell>
        <mxCell id="fa4uJrr_QhnZvR9-6Muc-72" value="&lt;font color=&quot;#33ffc9&quot; style=&quot;font-size: 15px;&quot;&gt;&lt;span style=&quot;font-family: Helvetica; font-style: normal; font-variant-ligatures: normal; font-variant-caps: normal; font-weight: 400; letter-spacing: normal; orphans: 2; text-align: left; text-indent: 0px; text-transform: none; widows: 2; word-spacing: 0px; -webkit-text-stroke-width: 0px; white-space: normal; background-color: rgb(251, 251, 251); text-decoration-thickness: initial; text-decoration-style: initial; text-decoration-color: initial; float: none; display: inline !important;&quot;&gt;&amp;nbsp;def bayesian_modeling:&lt;/span&gt;&lt;br style=&quot;forced-color-adjust: none; padding: 0px; margin: 0px; font-family: Helvetica; font-style: normal; font-variant-ligatures: normal; font-variant-caps: normal; font-weight: 400; letter-spacing: normal; orphans: 2; text-align: left; text-indent: 0px; text-transform: none; widows: 2; word-spacing: 0px; -webkit-text-stroke-width: 0px; white-space: normal; background-color: rgb(251, 251, 251); text-decoration-thickness: initial; text-decoration-style: initial; text-decoration-color: initial;&quot;&gt;&lt;span style=&quot;forced-color-adjust: none; padding: 0px; margin: 0px; font-family: Helvetica; font-style: normal; font-variant-ligatures: normal; font-variant-caps: normal; font-weight: 400; letter-spacing: normal; orphans: 2; text-align: left; text-indent: 0px; text-transform: none; widows: 2; word-spacing: 0px; -webkit-text-stroke-width: 0px; background-color: rgb(251, 251, 251); text-decoration-thickness: initial; text-decoration-style: initial; text-decoration-color: initial; white-space: pre;&quot;&gt;&amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;/font&gt;" style="text;whiteSpace=wrap;html=1;" parent="WIyWlLk6GJQsqaUBKTNV-1" vertex="1">
          <mxGeometry x="1120" y="-280" width="230" height="50" as="geometry" />
        </mxCell>
        <mxCell id="fa4uJrr_QhnZvR9-6Muc-74" value="&lt;div style=&quot;forced-color-adjust: none; padding: 0px; margin: 0px; font-family: Helvetica; font-style: normal; font-variant-ligatures: normal; font-variant-caps: normal; font-weight: 400; letter-spacing: normal; orphans: 2; text-align: left; text-indent: 0px; text-transform: none; widows: 2; word-spacing: 0px; -webkit-text-stroke-width: 0px; white-space: normal; background-color: rgb(251, 251, 251); text-decoration-thickness: initial; text-decoration-style: initial; text-decoration-color: initial; font-size: 15px;&quot;&gt;&lt;font color=&quot;#33ff99&quot; style=&quot;font-size: 15px;&quot;&gt;def run_bayesian_model(&lt;/font&gt;&lt;/div&gt;&lt;div style=&quot;forced-color-adjust: none; padding: 0px; margin: 0px; font-family: Helvetica; font-style: normal; font-variant-ligatures: normal; font-variant-caps: normal; font-weight: 400; letter-spacing: normal; orphans: 2; text-align: left; text-indent: 0px; text-transform: none; widows: 2; word-spacing: 0px; -webkit-text-stroke-width: 0px; white-space: normal; background-color: rgb(251, 251, 251); text-decoration-thickness: initial; text-decoration-style: initial; text-decoration-color: initial; font-size: 15px;&quot;&gt;&lt;font color=&quot;#33ff99&quot; style=&quot;font-size: 15px;&quot;&gt;&amp;nbsp; &amp;nbsp; features_df, normalized_features_df,transformation_params,&lt;/font&gt;&lt;/div&gt;&lt;div style=&quot;forced-color-adjust: none; padding: 0px; margin: 0px; font-family: Helvetica; font-style: normal; font-variant-ligatures: normal; font-variant-caps: normal; font-weight: 400; letter-spacing: normal; orphans: 2; text-align: left; text-indent: 0px; text-transform: none; widows: 2; word-spacing: 0px; -webkit-text-stroke-width: 0px; white-space: normal; background-color: rgb(251, 251, 251); text-decoration-thickness: initial; text-decoration-style: initial; text-decoration-color: initial; font-size: 15px;&quot;&gt;&lt;font color=&quot;#33ff99&quot; style=&quot;font-size: 15px;&quot;&gt;&amp;nbsp; &amp;nbsp; channel_code, config, experiment_tracker, levels&lt;/font&gt;&lt;/div&gt;&lt;div style=&quot;forced-color-adjust: none; padding: 0px; margin: 0px; font-family: Helvetica; font-style: normal; font-variant-ligatures: normal; font-variant-caps: normal; font-weight: 400; letter-spacing: normal; orphans: 2; text-align: left; text-indent: 0px; text-transform: none; widows: 2; word-spacing: 0px; -webkit-text-stroke-width: 0px; white-space: normal; background-color: rgb(251, 251, 251); text-decoration-thickness: initial; text-decoration-style: initial; text-decoration-color: initial; font-size: 15px;&quot;&gt;&lt;font color=&quot;#33ff99&quot; style=&quot;font-size: 15px;&quot;&gt;):&lt;/font&gt;&lt;/div&gt;" style="text;whiteSpace=wrap;html=1;" parent="WIyWlLk6GJQsqaUBKTNV-1" vertex="1">
          <mxGeometry x="1780" y="-270" width="480" height="80" as="geometry" />
        </mxCell>
        <UserObject label="# &lt;&lt; (1) INITIALIZATION: BayesianResponseModel&gt;&gt;&#xa;        stan_model_file_list = config.get(&quot;STAN_MODEL_FILE&quot;)&#xa;    if config.get(&quot;USE_BUILDER&quot;):&#xa;        sb = StanBuilder(channel_code, config)&#xa;        sb.build_and_save_model(stan_model_file)&#xa;&#xa;&#xa;    bayesian_model = BayesianResponseModel()&#xa;&#xa;&#xa;    # &lt;&lt; (2) MODEL INPUT CREATION &gt;&gt;&#xa;    bayesian_model.create_data_input()&#xa;&#xa;&#xa;    # &lt;&lt; (3) MODEL COMPILATION: BayesianResponseModel &gt;&gt;&#xa;    bayesian_model.compile_model()&#xa;&#xa;&#xa;    # &lt;&lt; (4) MODEL TRAINING: BayesianResponseModel &gt;&gt;&#xa;    bayesian_model.train_model()&#xa;&#xa;&#xa;    # Compute sample and mean_adstock&#xa;    samples_df = bayesian_model.fit.draws_pd()&#xa;&#xa;&#xa;    # &lt;&lt; (5) POST PROCESSSING: BayesianResponseModel&gt;&gt;  - Check the A&amp;P Code in Details since this is a part of it.&#xa;  &#xa;    model_post_process = BayesianPostProcess()&#xa;    model_post_process.run_post_processing()&#xa;&#xa;&#xa;    return (&#xa;        bayesian_model.indexes,&#xa;        lambda_adstock,&#xa;        bayesian_model,&#xa;        params_summary_df,&#xa;    )" link="# &lt;&lt; (1) INITIALIZATION: BayesianResponseModel&gt;&gt;&#xa;        stan_model_file_list = config.get(&quot;STAN_MODEL_FILE&quot;)&#xa;    if config.get(&quot;USE_BUILDER&quot;):&#xa;        sb = StanBuilder(channel_code, config)&#xa;        sb.build_and_save_model(stan_model_file)&#xa;&#xa;&#xa;    bayesian_model = BayesianResponseModel()&#xa;&#xa;&#xa;    # &lt;&lt; (2) MODEL INPUT CREATION &gt;&gt;&#xa;    bayesian_model.create_data_input()&#xa;&#xa;&#xa;    # &lt;&lt; (3) MODEL COMPILATION: BayesianResponseModel &gt;&gt;&#xa;    bayesian_model.compile_model()&#xa;&#xa;&#xa;    # &lt;&lt; (4) MODEL TRAINING: BayesianResponseModel &gt;&gt;&#xa;    bayesian_model.train_model()&#xa;&#xa;&#xa;    # Compute sample and mean_adstock&#xa;    samples_df = bayesian_model.fit.draws_pd()&#xa;&#xa;&#xa;    # &lt;&lt; (5) POST PROCESSSING: BayesianResponseModel&gt;&gt;  - Check the A&amp;P Code in Details since this is a part of it.&#xa;  &#xa;    model_post_process = BayesianPostProcess()&#xa;    model_post_process.run_post_processing()&#xa;    return (&#xa;        bayesian_model.indexes,&#xa;        lambda_adstock,&#xa;        bayesian_model,&#xa;        params_summary_df,&#xa;    )" id="fa4uJrr_QhnZvR9-6Muc-75">
          <mxCell style="text;whiteSpace=wrap;" parent="WIyWlLk6GJQsqaUBKTNV-1" vertex="1">
            <mxGeometry x="1750" y="21" width="560" height="560" as="geometry" />
          </mxCell>
        </UserObject>
        <mxCell id="fa4uJrr_QhnZvR9-6Muc-76" value="using &#xa;cmdstanpy.CmdStanModel&#xa;returns the CODE of model as str" style="text;whiteSpace=wrap;fillColor=#dae8fc;strokeColor=#6c8ebf;" parent="WIyWlLk6GJQsqaUBKTNV-1" vertex="1">
          <mxGeometry x="2140" y="171" width="180" height="60" as="geometry" />
        </mxCell>
        <mxCell id="fa4uJrr_QhnZvR9-6Muc-77" value="&lt;div&gt;calculates (uses sample)&lt;span style=&quot;background-color: initial;&quot;&gt;(MCMC)&amp;nbsp;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;sampling from the posterior distribution&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;returns an&amp;nbsp;&lt;/span&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;CmdStanMCMC object with all info&lt;/span&gt;&lt;/div&gt;" style="text;whiteSpace=wrap;html=1;fillColor=#dae8fc;strokeColor=#6c8ebf;" parent="WIyWlLk6GJQsqaUBKTNV-1" vertex="1">
          <mxGeometry x="2110" y="246" width="220" height="75" as="geometry" />
        </mxCell>
        <mxCell id="fa4uJrr_QhnZvR9-6Muc-79" value="method is used to extract the posterior samples (or draws) from a fitted model in the form of a &lt;strong&gt;Pandas DataFrame&lt;/strong&gt;" style="text;whiteSpace=wrap;html=1;fillColor=#dae8fc;strokeColor=#6c8ebf;" parent="WIyWlLk6GJQsqaUBKTNV-1" vertex="1">
          <mxGeometry x="2040" y="341" width="270" height="50" as="geometry" />
        </mxCell>
        <mxCell id="fa4uJrr_QhnZvR9-6Muc-81" value="" style="endArrow=classic;html=1;rounded=0;entryX=0;entryY=0.25;entryDx=0;entryDy=0;exitX=1;exitY=0.75;exitDx=0;exitDy=0;" parent="WIyWlLk6GJQsqaUBKTNV-1" source="fa4uJrr_QhnZvR9-6Muc-72" target="fa4uJrr_QhnZvR9-6Muc-74" edge="1">
          <mxGeometry width="50" height="50" relative="1" as="geometry">
            <mxPoint x="1390" y="-229" as="sourcePoint" />
            <mxPoint x="1440" y="-279" as="targetPoint" />
          </mxGeometry>
        </mxCell>
        <mxCell id="bgpGDWmcntnncIZ7-7qG-0" value="post process validations like:&#xa;check intercept, betas, rhat.." style="text;whiteSpace=wrap;fillColor=#dae8fc;strokeColor=#6c8ebf;" vertex="1" parent="WIyWlLk6GJQsqaUBKTNV-1">
          <mxGeometry x="2050" y="441" width="190" height="50" as="geometry" />
        </mxCell>
        <UserObject label="&lt;font color=&quot;#3399ff&quot;&gt;&lt;span style=&quot;font-family: Helvetica; font-size: 12px; font-style: normal; font-variant-ligatures: normal; font-variant-caps: normal; font-weight: 400; letter-spacing: normal; orphans: 2; text-align: left; text-indent: 0px; text-transform: none; widows: 2; word-spacing: 0px; -webkit-text-stroke-width: 0px; white-space: normal; background-color: rgb(251, 251, 251); text-decoration-thickness: initial; text-decoration-style: initial; text-decoration-color: initial; float: none; display: inline !important;&quot;&gt;save_file(&quot;output/features_df.csv&quot;)&lt;/span&gt;&lt;br style=&quot;forced-color-adjust: none; padding: 0px; margin: 0px; font-family: Helvetica; font-size: 12px; font-style: normal; font-variant-ligatures: normal; font-variant-caps: normal; font-weight: 400; letter-spacing: normal; orphans: 2; text-align: left; text-indent: 0px; text-transform: none; widows: 2; word-spacing: 0px; -webkit-text-stroke-width: 0px; white-space: normal; background-color: rgb(251, 251, 251); text-decoration-thickness: initial; text-decoration-style: initial; text-decoration-color: initial;&quot;&gt;&lt;br style=&quot;forced-color-adjust: none; padding: 0px; margin: 0px; font-family: Helvetica; font-size: 12px; font-style: normal; font-variant-ligatures: normal; font-variant-caps: normal; font-weight: 400; letter-spacing: normal; orphans: 2; text-align: left; text-indent: 0px; text-transform: none; widows: 2; word-spacing: 0px; -webkit-text-stroke-width: 0px; white-space: normal; background-color: rgb(251, 251, 251); text-decoration-thickness: initial; text-decoration-style: initial; text-decoration-color: initial;&quot;&gt;&lt;span style=&quot;font-family: Helvetica; font-size: 12px; font-style: normal; font-variant-ligatures: normal; font-variant-caps: normal; font-weight: 400; letter-spacing: normal; orphans: 2; text-align: left; text-indent: 0px; text-transform: none; widows: 2; word-spacing: 0px; -webkit-text-stroke-width: 0px; white-space: normal; background-color: rgb(251, 251, 251); text-decoration-thickness: initial; text-decoration-style: initial; text-decoration-color: initial; float: none; display: inline !important;&quot;&gt;save_file(&quot;output/normalized_features_df.csv&quot;)&lt;/span&gt;&lt;br style=&quot;forced-color-adjust: none; padding: 0px; margin: 0px; font-family: Helvetica; font-size: 12px; font-style: normal; font-variant-ligatures: normal; font-variant-caps: normal; font-weight: 400; letter-spacing: normal; orphans: 2; text-align: left; text-indent: 0px; text-transform: none; widows: 2; word-spacing: 0px; -webkit-text-stroke-width: 0px; white-space: normal; background-color: rgb(251, 251, 251); text-decoration-thickness: initial; text-decoration-style: initial; text-decoration-color: initial;&quot;&gt;&lt;br style=&quot;forced-color-adjust: none; padding: 0px; margin: 0px; font-family: Helvetica; font-size: 12px; font-style: normal; font-variant-ligatures: normal; font-variant-caps: normal; font-weight: 400; letter-spacing: normal; orphans: 2; text-align: left; text-indent: 0px; text-transform: none; widows: 2; word-spacing: 0px; -webkit-text-stroke-width: 0px; white-space: normal; background-color: rgb(251, 251, 251); text-decoration-thickness: initial; text-decoration-style: initial; text-decoration-color: initial;&quot;&gt;&lt;span style=&quot;font-family: Helvetica; font-size: 12px; font-style: normal; font-variant-ligatures: normal; font-variant-caps: normal; font-weight: 400; letter-spacing: normal; orphans: 2; text-align: left; text-indent: 0px; text-transform: none; widows: 2; word-spacing: 0px; -webkit-text-stroke-width: 0px; white-space: normal; background-color: rgb(251, 251, 251); text-decoration-thickness: initial; text-decoration-style: initial; text-decoration-color: initial; float: none; display: inline !important;&quot;&gt;save_file(&quot;output/region_index_df.csv&quot;)&lt;/span&gt;&lt;/font&gt;" link="&lt;span style=&quot;color: rgb(0, 0, 0); font-family: Helvetica; font-size: 12px; font-style: normal; font-variant-ligatures: normal; font-variant-caps: normal; font-weight: 400; letter-spacing: normal; orphans: 2; text-align: left; text-indent: 0px; text-transform: none; widows: 2; word-spacing: 0px; -webkit-text-stroke-width: 0px; white-space: normal; background-color: rgb(251, 251, 251); text-decoration-thickness: initial; text-decoration-style: initial; text-decoration-color: initial; display: inline !important; float: none;&quot;&gt;save_file(&quot;output/features_df.csv&quot;)&lt;/span&gt;&lt;br style=&quot;forced-color-adjust: none; padding: 0px; margin: 0px; color: rgb(0, 0, 0); font-family: Helvetica; font-size: 12px; font-style: normal; font-variant-ligatures: normal; font-variant-caps: normal; font-weight: 400; letter-spacing: normal; orphans: 2; text-align: left; text-indent: 0px; text-transform: none; widows: 2; word-spacing: 0px; -webkit-text-stroke-width: 0px; white-space: normal; background-color: rgb(251, 251, 251); text-decoration-thickness: initial; text-decoration-style: initial; text-decoration-color: initial;&quot;&gt;&lt;br style=&quot;forced-color-adjust: none; padding: 0px; margin: 0px; color: rgb(0, 0, 0); font-family: Helvetica; font-size: 12px; font-style: normal; font-variant-ligatures: normal; font-variant-caps: normal; font-weight: 400; letter-spacing: normal; orphans: 2; text-align: left; text-indent: 0px; text-transform: none; widows: 2; word-spacing: 0px; -webkit-text-stroke-width: 0px; white-space: normal; background-color: rgb(251, 251, 251); text-decoration-thickness: initial; text-decoration-style: initial; text-decoration-color: initial;&quot;&gt;&lt;br style=&quot;forced-color-adjust: none; padding: 0px; margin: 0px; color: rgb(0, 0, 0); font-family: Helvetica; font-size: 12px; font-style: normal; font-variant-ligatures: normal; font-variant-caps: normal; font-weight: 400; letter-spacing: normal; orphans: 2; text-align: left; text-indent: 0px; text-transform: none; widows: 2; word-spacing: 0px; -webkit-text-stroke-width: 0px; white-space: normal; background-color: rgb(251, 251, 251); text-decoration-thickness: initial; text-decoration-style: initial; text-decoration-color: initial;&quot;&gt;&lt;span style=&quot;color: rgb(0, 0, 0); font-family: Helvetica; font-size: 12px; font-style: normal; font-variant-ligatures: normal; font-variant-caps: normal; font-weight: 400; letter-spacing: normal; orphans: 2; text-align: left; text-indent: 0px; text-transform: none; widows: 2; word-spacing: 0px; -webkit-text-stroke-width: 0px; white-space: normal; background-color: rgb(251, 251, 251); text-decoration-thickness: initial; text-decoration-style: initial; text-decoration-color: initial; display: inline !important; float: none;&quot;&gt;save_file(&quot;output/normalized_features_df.csv&quot;)&lt;/span&gt;&lt;br style=&quot;forced-color-adjust: none; padding: 0px; margin: 0px; color: rgb(0, 0, 0); font-family: Helvetica; font-size: 12px; font-style: normal; font-variant-ligatures: normal; font-variant-caps: normal; font-weight: 400; letter-spacing: normal; orphans: 2; text-align: left; text-indent: 0px; text-transform: none; widows: 2; word-spacing: 0px; -webkit-text-stroke-width: 0px; white-space: normal; background-color: rgb(251, 251, 251); text-decoration-thickness: initial; text-decoration-style: initial; text-decoration-color: initial;&quot;&gt;&lt;br style=&quot;forced-color-adjust: none; padding: 0px; margin: 0px; color: rgb(0, 0, 0); font-family: Helvetica; font-size: 12px; font-style: normal; font-variant-ligatures: normal; font-variant-caps: normal; font-weight: 400; letter-spacing: normal; orphans: 2; text-align: left; text-indent: 0px; text-transform: none; widows: 2; word-spacing: 0px; -webkit-text-stroke-width: 0px; white-space: normal; background-color: rgb(251, 251, 251); text-decoration-thickness: initial; text-decoration-style: initial; text-decoration-color: initial;&quot;&gt;&lt;span style=&quot;color: rgb(0, 0, 0); font-family: Helvetica; font-size: 12px; font-style: normal; font-variant-ligatures: normal; font-variant-caps: normal; font-weight: 400; letter-spacing: normal; orphans: 2; text-align: left; text-indent: 0px; text-transform: none; widows: 2; word-spacing: 0px; -webkit-text-stroke-width: 0px; white-space: normal; background-color: rgb(251, 251, 251); text-decoration-thickness: initial; text-decoration-style: initial; text-decoration-color: initial; display: inline !important; float: none;&quot;&gt;save_file(&quot;output/region_index_df.csv&quot;)&lt;/span&gt;&lt;br style=&quot;forced-color-adjust: none; padding: 0px; margin: 0px; color: rgb(0, 0, 0); font-family: Helvetica; font-size: 12px; font-style: normal; font-variant-ligatures: normal; font-variant-caps: normal; font-weight: 400; letter-spacing: normal; orphans: 2; text-align: left; text-indent: 0px; text-transform: none; widows: 2; word-spacing: 0px; -webkit-text-stroke-width: 0px; white-space: normal; background-color: rgb(251, 251, 251); text-decoration-thickness: initial; text-decoration-style: initial; text-decoration-color: initial;&quot;&gt;" id="bgpGDWmcntnncIZ7-7qG-1">
          <mxCell style="text;whiteSpace=wrap;html=1;" vertex="1" parent="WIyWlLk6GJQsqaUBKTNV-1">
            <mxGeometry x="1160" y="-169" width="280" height="100" as="geometry" />
          </mxCell>
        </UserObject>
        <UserObject label="src/response_curve/response_curve_generator.py" link="src/response_curve/response_curve_generator.py" id="bgpGDWmcntnncIZ7-7qG-3">
          <mxCell style="text;whiteSpace=wrap;strokeWidth=2;fontSize=14;" vertex="1" parent="WIyWlLk6GJQsqaUBKTNV-1">
            <mxGeometry x="1120" y="45" width="370" height="40" as="geometry" />
          </mxCell>
        </UserObject>
        <mxCell id="bgpGDWmcntnncIZ7-7qG-6" value="&lt;span style=&quot;font-family: Helvetica; font-size: 12px; font-style: normal; font-variant-ligatures: normal; font-variant-caps: normal; font-weight: 400; letter-spacing: normal; orphans: 2; text-align: left; text-indent: 0px; text-transform: none; widows: 2; word-spacing: 0px; -webkit-text-stroke-width: 0px; white-space: normal; background-color: rgb(251, 251, 251); text-decoration-thickness: initial; text-decoration-style: initial; text-decoration-color: initial; float: none; display: inline !important;&quot;&gt;&lt;font color=&quot;#cc6600&quot;&gt;StanUpliftComputation CLASS&lt;/font&gt;&lt;/span&gt;" style="text;whiteSpace=wrap;html=1;" vertex="1" parent="WIyWlLk6GJQsqaUBKTNV-1">
          <mxGeometry x="1160" y="110" width="200" height="40" as="geometry" />
        </mxCell>
        <UserObject label="def __init__( ):&#xa;        &quot;&quot;&quot;&#xa;        Constructor method&#xa;        &quot;&quot;&quot;&#xa;        self.bayesian_model = bayesian_model&#xa;        &#xa;        self.bayesian_model.create_data_input()&#xa;        self.features_df = (... )&#xa;        self.transformation_params = channel_features.transformation_params&#xa;        self.bayesian_model_indexes = bayesian_model_indexes&#xa;        self.response_curves_manager = response_curves_manager&#xa;        self.channel_code = channel_features.channel_code&#xa;        self.config = config&#xa;        self.brand_time_horizon = self.bayesian_model.brand_time_horizon&#xa;        self.brand_region_stan_index = self.bayesian_model.brand_region_stan_index&#xa;        self.transfo_target = self.transformation_params(self.config.get(&quot;TARGET_VARIABLE&quot;))&#xa;        self.n_brands= len(self.bayesian_model_indexes.index_brand)&#xa;        self.brand_time_index = (...)&#xa;        self.uplift_aggregation_index = None&#xa;        self.national_features = channel_features.national_features_df&#xa;        self.touchpoints = list(...)&#xa;        self.contribs_names = {f&quot;contrib_{i}&quot;: i for i in self.touchpoints}&#xa;        self.adstock_lengths = get_adstock_lengths()&#xa;&#xa;        self.uplift_manager = UpliftFeatureManager(CLASS)&#xa;&#xa;&#xa;        sb = GeneratedQuantitiesBuilder( CLASS)&#xa;&#xa;&#xa;        sb.build_and_save_model(&quot;stan_file.stan&quot;)&#xa;        self.gq_model = cmdstanpy.CmdStanModel()&#xa;        self.gq_model.compile()" link="def __init__( ):&#xa;        &quot;&quot;&quot;&#xa;        Constructor method&#xa;        &quot;&quot;&quot;&#xa;        self.bayesian_model = bayesian_model&#xa;        &#xa;        self.bayesian_model.create_data_input()&#xa;        self.features_df = (... )&#xa;        self.transformation_params = channel_features.transformation_params&#xa;        self.bayesian_model_indexes = bayesian_model_indexes&#xa;        self.response_curves_manager = response_curves_manager&#xa;        self.channel_code = channel_features.channel_code&#xa;        self.config = config&#xa;        self.brand_time_horizon = self.bayesian_model.brand_time_horizon&#xa;        self.brand_region_stan_index = self.bayesian_model.brand_region_stan_index&#xa;&#xa;&#xa;        self.transfo_target = self.transformation_params(self.config.get(&quot;TARGET_VARIABLE&quot;))&#xa;        self.n_brands = len(self.bayesian_model_indexes.index_brand)&#xa;        self.brand_time_index = (...)&#xa;&#xa;&#xa;        self.uplift_aggregation_index = None&#xa;        self.national_features = channel_features.national_features_df&#xa;&#xa;&#xa;        self.touchpoints = list(...)&#xa;        self.contribs_names = {f&quot;contrib_{i}&quot;: i for i in self.touchpoints}&#xa;        self.adstock_lengths = get_adstock_lengths()&#xa;        self.uplift_manager = UpliftFeatureManager(CLASS)&#xa;&#xa;&#xa;        sb = GeneratedQuantitiesBuilder( )&#xa;        sb.build_and_save_model(&quot;stan_file.stan&quot;)&#xa;        self.gq_model = cmdstanpy.CmdStanModel()&#xa;        self.gq_model.compile()" id="bgpGDWmcntnncIZ7-7qG-7">
          <mxCell style="text;whiteSpace=wrap;" vertex="1" parent="WIyWlLk6GJQsqaUBKTNV-1">
            <mxGeometry x="1125" y="161" width="530" height="540" as="geometry" />
          </mxCell>
        </UserObject>
        <mxCell id="bgpGDWmcntnncIZ7-7qG-9" value="Creates Stan model file structure as TEXT" style="text;html=1;align=center;verticalAlign=middle;whiteSpace=wrap;rounded=0;fillColor=#dae8fc;strokeColor=#6c8ebf;" vertex="1" parent="WIyWlLk6GJQsqaUBKTNV-1">
          <mxGeometry x="1430" y="591" width="150" height="60" as="geometry" />
        </mxCell>
        <UserObject label="" link="save_file(&quot;output/features_df.csv&quot;&#xa;save_file(&quot;output/normalized_features_df.csv&quot;&#xa;save_file(&quot;output/region_index_df.csv&quot;" id="bgpGDWmcntnncIZ7-7qG-10">
          <mxCell style="edgeStyle=orthogonalEdgeStyle;rounded=0;orthogonalLoop=1;jettySize=auto;html=1;exitX=1;exitY=0.5;exitDx=0;exitDy=0;entryX=0.5;entryY=0;entryDx=0;entryDy=0;" edge="1" parent="WIyWlLk6GJQsqaUBKTNV-1" source="fa4uJrr_QhnZvR9-6Muc-62" target="bgpGDWmcntnncIZ7-7qG-6">
            <mxGeometry x="-0.0007" relative="1" as="geometry">
              <mxPoint x="1000" y="558" as="sourcePoint" />
              <mxPoint x="1277.0588235294117" y="640.9999999999998" as="targetPoint" />
              <Array as="points">
                <mxPoint x="990" y="524" />
                <mxPoint x="990" y="30" />
                <mxPoint x="1260" y="30" />
              </Array>
              <mxPoint as="offset" />
            </mxGeometry>
          </mxCell>
        </UserObject>
        <mxCell id="bgpGDWmcntnncIZ7-7qG-14" value="&lt;div style=&quot;forced-color-adjust: none;&quot;&gt;&lt;div style=&quot;forced-color-adjust: none;&quot;&gt;results_bayesian_uplift_channel = &lt;span style=&quot;white-space: pre;&quot;&gt;&#x9;&lt;/span&gt;&lt;font color=&quot;#ff66ff&quot;&gt;uplift_computation.compute_df(&lt;span style=&quot;forced-color-adjust: none; background-color: initial;&quot;&gt;&quot;RESPONSE_CURVE_YEARS&quot;)&lt;/span&gt;&lt;span style=&quot;forced-color-adjust: none; background-color: initial;&quot;&gt;)&lt;/span&gt;&lt;/font&gt;&lt;/div&gt;&lt;/div&gt;&lt;div style=&quot;forced-color-adjust: none;&quot;&gt;&lt;br style=&quot;forced-color-adjust: none; color: rgb(0, 0, 0); font-family: Helvetica; font-size: 12px; font-style: normal; font-variant-ligatures: normal; font-variant-caps: normal; font-weight: 400; letter-spacing: normal; orphans: 2; text-align: left; text-indent: 0px; text-transform: none; widows: 2; word-spacing: 0px; -webkit-text-stroke-width: 0px; white-space: normal; background-color: rgb(251, 251, 251); text-decoration-thickness: initial; text-decoration-style: initial; text-decoration-color: initial;&quot;&gt;&lt;/div&gt;" style="text;whiteSpace=wrap;html=1;" vertex="1" parent="WIyWlLk6GJQsqaUBKTNV-1">
          <mxGeometry x="547.5" y="535" width="402.5" height="70" as="geometry" />
        </mxCell>
        <mxCell id="bgpGDWmcntnncIZ7-7qG-15" value="&lt;span style=&quot;font-family: Helvetica; font-size: 12px; font-style: normal; font-variant-ligatures: normal; font-variant-caps: normal; font-weight: 400; letter-spacing: normal; orphans: 2; text-align: left; text-indent: 0px; text-transform: none; widows: 2; word-spacing: 0px; -webkit-text-stroke-width: 0px; white-space: normal; background-color: rgb(251, 251, 251); text-decoration-thickness: initial; text-decoration-style: initial; text-decoration-color: initial; float: none; display: inline !important;&quot;&gt;&lt;font color=&quot;#ff66ff&quot;&gt;uplift_computation&lt;/font&gt;&lt;/span&gt;" style="text;whiteSpace=wrap;html=1;" vertex="1" parent="WIyWlLk6GJQsqaUBKTNV-1">
          <mxGeometry x="547.5" y="504" width="130" height="40" as="geometry" />
        </mxCell>
        <UserObject label="" link="save_file(&quot;output/features_df.csv&quot;&#xa;save_file(&quot;output/normalized_features_df.csv&quot;&#xa;save_file(&quot;output/region_index_df.csv&quot;" id="bgpGDWmcntnncIZ7-7qG-17">
          <mxCell style="edgeStyle=orthogonalEdgeStyle;rounded=0;orthogonalLoop=1;jettySize=auto;html=1;entryX=0.5;entryY=0;entryDx=0;entryDy=0;" edge="1" parent="WIyWlLk6GJQsqaUBKTNV-1" target="bgpGDWmcntnncIZ7-7qG-18">
            <mxGeometry x="-0.0007" relative="1" as="geometry">
              <mxPoint x="708" y="569" as="sourcePoint" />
              <mxPoint x="1340" y="880" as="targetPoint" />
              <Array as="points">
                <mxPoint x="708" y="579" />
                <mxPoint x="872" y="579" />
                <mxPoint x="872" y="760" />
                <mxPoint x="1440" y="760" />
              </Array>
              <mxPoint as="offset" />
            </mxGeometry>
          </mxCell>
        </UserObject>
        <UserObject label="def compute_df(&quot;RESPONSE_CURVE_YEARS&quot;)" link="uplift_computation.compute_df(&#xa;                self.config.get(&quot;RESPONSE_CURVE_YEARS&quot;)" id="bgpGDWmcntnncIZ7-7qG-18">
          <mxCell style="text;whiteSpace=wrap;fontColor=#FF8000;" vertex="1" parent="WIyWlLk6GJQsqaUBKTNV-1">
            <mxGeometry x="1270" y="840" width="340" height="50" as="geometry" />
          </mxCell>
        </UserObject>
        <UserObject label="src/response_curve/response_curve_generator.py" link="src/response_curve/response_curve_generator.py" id="bgpGDWmcntnncIZ7-7qG-20">
          <mxCell style="text;whiteSpace=wrap;" vertex="1" parent="WIyWlLk6GJQsqaUBKTNV-1">
            <mxGeometry x="1300" y="790" width="300" height="40" as="geometry" />
          </mxCell>
        </UserObject>
        <mxCell id="bgpGDWmcntnncIZ7-7qG-21" value="Computes all necessary DF for uplifts and contribution computation.&#xa;DFs:&#xa;&#xa;1) Sales contribution:   contains for each year and touchpoint the delta&#xa;to null volumes for uplift 0 and 1, with contribution method for uplifted feature&#xa;   calculation&#xa;&#xa;2) Sales distribution df: contains for each month, each uplift value, and each touchpoint, the delta to null volumes&#xa;&#xa;3)  Volumes uplifts uplift: contains for each year, each uplift value, and each touchpoint, the delta to null volumes" style="text;whiteSpace=wrap;fillColor=#dae8fc;strokeColor=#6c8ebf;fontSize=14;align=left;spacingLeft=5;" vertex="1" parent="WIyWlLk6GJQsqaUBKTNV-1">
          <mxGeometry x="1310" y="879" width="630" height="241" as="geometry" />
        </mxCell>
        <UserObject label="for year in years:&#xa;            self.uplift_aggregation_index = get_uplift_time_scope( Scoped year_weeks for uplift computation)&#xa; &#xa;            value_contribution_year, _ = self.compute_uplift_df(&#xa;                uplifts=[0, 1], year=year, is_contrib=True&#xa;            )&#xa;            value_contribution = pd.concat(value_contribution, value_contribution_year],) &#xa;&#xa;           &#xa;            value_uplifts_year, value_distribution_year = self.compute_uplift_df(&quot;UPLIFT_VALUES_TO_COMPUTE&quot;, year)&#xa;            &#xa;        results_uplift_channel = ResultsBayesianUpliftChannel()&#xa;&#xa;        return results_uplift_channel" link="for year in years:&#xa;            self.uplift_aggregation_index = get_uplift_time_scope( Scoped year_weeks for uplift computation)&#xa; &#xa;            value_contribution_year, _ = self.compute_uplift_df(&#xa;                uplifts=[0, 1], year=year, is_contrib=True&#xa;            )&#xa;            value_contribution = pd.concat(&#xa;                [value_contribution, value_contribution_year],&#xa;                axis=0,&#xa;                sort=False,&#xa;            ) &#xa;           #&quot;Computing uplifted value for each year &quot;&#xa;            value_uplifts_year, value_distribution_year = self.compute_uplift_df(&quot;UPLIFT_VALUES_TO_COMPUTE&quot;, year)&#xa;            &#xa;        results_uplift_channel = ResultsBayesianUpliftChannel()&#xa;        return results_uplift_channel" id="bgpGDWmcntnncIZ7-7qG-22">
          <mxCell style="text;whiteSpace=wrap;" vertex="1" parent="WIyWlLk6GJQsqaUBKTNV-1">
            <mxGeometry x="1270" y="1150" width="650" height="280" as="geometry" />
          </mxCell>
        </UserObject>
        <mxCell id="bgpGDWmcntnncIZ7-7qG-23" value="&lt;span style=&quot;font-family: Helvetica; font-size: 12px; font-style: normal; font-variant-ligatures: normal; font-variant-caps: normal; font-weight: 400; letter-spacing: normal; orphans: 2; text-align: left; text-indent: 0px; text-transform: none; widows: 2; word-spacing: 0px; -webkit-text-stroke-width: 0px; white-space: normal; background-color: rgb(251, 251, 251); text-decoration-thickness: initial; text-decoration-style: initial; text-decoration-color: initial; float: none; display: inline !important;&quot;&gt;&lt;font color=&quot;#808080&quot;&gt;#&quot;Computing uplifted value for each year &quot;&lt;/font&gt;&lt;/span&gt;" style="text;whiteSpace=wrap;html=1;" vertex="1" parent="WIyWlLk6GJQsqaUBKTNV-1">
          <mxGeometry x="1324" y="1263" width="260" height="40" as="geometry" />
        </mxCell>
        <UserObject label="" link="save_file(&quot;output/features_df.csv&quot;&#xa;save_file(&quot;output/normalized_features_df.csv&quot;&#xa;save_file(&quot;output/region_index_df.csv&quot;" id="bgpGDWmcntnncIZ7-7qG-24">
          <mxCell style="edgeStyle=orthogonalEdgeStyle;rounded=0;orthogonalLoop=1;jettySize=auto;html=1;" edge="1" parent="WIyWlLk6GJQsqaUBKTNV-1">
            <mxGeometry x="-0.0007" relative="1" as="geometry">
              <mxPoint x="1618" y="1281" as="sourcePoint" />
              <mxPoint x="2330" y="790" as="targetPoint" />
              <Array as="points">
                <mxPoint x="1618" y="1270" />
                <mxPoint x="2000" y="1270" />
                <mxPoint x="2000" y="720" />
                <mxPoint x="2330" y="720" />
              </Array>
              <mxPoint as="offset" />
            </mxGeometry>
          </mxCell>
        </UserObject>
        <mxCell id="bgpGDWmcntnncIZ7-7qG-26" value="&lt;div style=&quot;padding-left: 10px;&quot;&gt;&lt;br&gt;&lt;/div&gt;&lt;div style=&quot;padding-left: 10px;&quot;&gt;&lt;br&gt;&lt;/div&gt;&lt;div style=&quot;padding-left: 10px;&quot;&gt;&lt;br&gt;&lt;/div&gt;&lt;div style=&quot;padding-left: 10px;&quot;&gt;&lt;br&gt;&lt;/div&gt;&lt;div style=&quot;padding-left: 10px;&quot;&gt;&lt;br&gt;&lt;/div&gt;&lt;div style=&quot;padding-left: 10px;&quot;&gt;&lt;br&gt;&lt;/div&gt;&lt;div style=&quot;padding-left: 10px;&quot;&gt;&lt;br&gt;&lt;/div&gt;&lt;div style=&quot;padding-left: 10px;&quot;&gt;&lt;br&gt;&lt;/div&gt;&lt;div style=&quot;padding-left: 10px;&quot;&gt;&lt;br&gt;&lt;/div&gt;&lt;div style=&quot;padding-left: 10px;&quot;&gt;&lt;br&gt;&lt;/div&gt;&lt;div style=&quot;padding-left: 10px;&quot;&gt;&lt;br&gt;&lt;/div&gt;&lt;div style=&quot;padding-left: 10px;&quot;&gt;&lt;br&gt;&lt;/div&gt;&lt;div style=&quot;padding-left: 10px;&quot;&gt;&lt;br&gt;&lt;/div&gt;&lt;div style=&quot;padding-left: 10px;&quot;&gt;&lt;br&gt;&lt;/div&gt;&lt;div style=&quot;padding-left: 10px;&quot;&gt;&lt;br&gt;&lt;/div&gt;&lt;blockquote style=&quot;margin: 0 0 0 40px; border: none; padding: 0px;&quot;&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp;value_uplift_df = pd.DataFrame(columns=[...])&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; value_distribution = pd.DataFrame(columns=[...])&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; samples_dict = self.compute_samples_for_uplifts(uplifts, year, is_contrib=is_contrib)&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; for contrib, tp in self.contribs_names.items():&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; value_uplift_df = pd.concat(&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; [&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; value_uplift_df,&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; self.compute_delta_to_null_values(samples_dict[contrib], tp, year, is_contrib),&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; ],&amp;nbsp;&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; )&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; if not is_contrib:&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; for uplift, samples in samples_dict[contrib].items():&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; value_distribution = pd.concat(&lt;span style=&quot;background-color: initial;&quot;&gt;value_distribution,&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; self.compute_distribution_values(samples, uplift, tp, year),&lt;/span&gt;.)&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; return value_uplift_df, value_distribution&lt;/div&gt;&lt;/div&gt;&lt;/blockquote&gt;" style="rounded=1;whiteSpace=wrap;html=1;align=left;" vertex="1" parent="WIyWlLk6GJQsqaUBKTNV-1">
          <mxGeometry x="2110" y="790" width="650" height="550" as="geometry" />
        </mxCell>
        <UserObject label="" link="save_file(&quot;output/features_df.csv&quot;&#xa;save_file(&quot;output/normalized_features_df.csv&quot;&#xa;save_file(&quot;output/region_index_df.csv&quot;" id="bgpGDWmcntnncIZ7-7qG-27">
          <mxCell style="edgeStyle=orthogonalEdgeStyle;rounded=0;orthogonalLoop=1;jettySize=auto;html=1;" edge="1" parent="WIyWlLk6GJQsqaUBKTNV-1">
            <mxGeometry x="-0.0007" relative="1" as="geometry">
              <mxPoint x="1540" y="1200.93" as="sourcePoint" />
              <mxPoint x="2330" y="783" as="targetPoint" />
              <Array as="points">
                <mxPoint x="1540" y="1190" />
                <mxPoint x="2000" y="1190" />
                <mxPoint x="2000" y="720" />
                <mxPoint x="2330" y="720" />
                <mxPoint x="2330" y="787" />
              </Array>
              <mxPoint as="offset" />
            </mxGeometry>
          </mxCell>
        </UserObject>
        <mxCell id="bgpGDWmcntnncIZ7-7qG-28" value="def compute_uplift_df(" style="text;whiteSpace=wrap;fontSize=14;fontColor=#FF8000;" vertex="1" parent="WIyWlLk6GJQsqaUBKTNV-1">
          <mxGeometry x="2170" y="800" width="150" height="40" as="geometry" />
        </mxCell>
        <mxCell id="bgpGDWmcntnncIZ7-7qG-30" value="&lt;div style=&quot;forced-color-adjust: none; padding-left: 10px;&quot;&gt;Performs the computation of delta to null values for all uplifts in 2 steps:&lt;/div&gt;&lt;div style=&quot;forced-color-adjust: none;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; 1. Compute the samples for all the values&lt;/div&gt;&lt;div style=&quot;forced-color-adjust: none;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; 2. Compute delta to null values&lt;/div&gt;&lt;div style=&quot;forced-color-adjust: none;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; 3. Aggregate the results and format them in a dataframe&lt;/div&gt;&lt;div style=&quot;forced-color-adjust: none; padding-left: 10px;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;/div&gt;&lt;div style=&quot;forced-color-adjust: none; padding-left: 10px;&quot;&gt;:param year: Year on which to compute the uplifts&lt;/div&gt;&lt;div style=&quot;forced-color-adjust: none;&quot;&gt;&amp;nbsp; &amp;nbsp;&lt;/div&gt;&lt;div style=&quot;forced-color-adjust: none;&quot;&gt;&amp;nbsp; &amp;nbsp; :return: Two dataframes containing :&lt;/div&gt;&lt;blockquote style=&quot;forced-color-adjust: none; margin: 0px 0px 0px 40px; border: none; padding: 0px;&quot;&gt;&lt;div style=&quot;forced-color-adjust: none;&quot;&gt;a) the delta to null values for all uplifts,&lt;/div&gt;&lt;div style=&quot;forced-color-adjust: none;&quot;&gt;&amp;nbsp; &amp;nbsp;&amp;nbsp;&lt;/div&gt;&lt;div style=&quot;forced-color-adjust: none;&quot;&gt;b) aggregated per year or per year week&lt;/div&gt;&lt;div style=&quot;forced-color-adjust: none;&quot;&gt;&lt;br style=&quot;forced-color-adjust: none; color: rgb(0, 0, 0); font-family: Helvetica; font-size: 12px; font-style: normal; font-variant-ligatures: normal; font-variant-caps: normal; font-weight: 400; letter-spacing: normal; orphans: 2; text-align: left; text-indent: 0px; text-transform: none; widows: 2; word-spacing: 0px; -webkit-text-stroke-width: 0px; white-space: normal; background-color: rgb(251, 251, 251); text-decoration-thickness: initial; text-decoration-style: initial; text-decoration-color: initial;&quot;&gt;&lt;/div&gt;&lt;/blockquote&gt;" style="text;whiteSpace=wrap;html=1;fillColor=#dae8fc;strokeColor=#6c8ebf;" vertex="1" parent="WIyWlLk6GJQsqaUBKTNV-1">
          <mxGeometry x="2160" y="850" width="420" height="200" as="geometry" />
        </mxCell>
        <mxCell id="bgpGDWmcntnncIZ7-7qG-32" value="" style="edgeStyle=segmentEdgeStyle;endArrow=classic;html=1;curved=0;rounded=0;endSize=8;startSize=8;" edge="1" parent="WIyWlLk6GJQsqaUBKTNV-1">
          <mxGeometry width="50" height="50" relative="1" as="geometry">
            <mxPoint x="2380" y="1110" as="sourcePoint" />
            <mxPoint x="3150" y="790" as="targetPoint" />
            <Array as="points">
              <mxPoint x="2380" y="1090" />
              <mxPoint x="2830" y="1090" />
              <mxPoint x="2830" y="730" />
              <mxPoint x="3150" y="730" />
            </Array>
          </mxGeometry>
        </mxCell>
        <mxCell id="bgpGDWmcntnncIZ7-7qG-35" value="&lt;span style=&quot;font-family: __styreneB_5d855b, __styreneB_Fallback_5d855b, ui-sans-serif, system-ui, -apple-system, &amp;quot;system-ui&amp;quot;, &amp;quot;Segoe UI&amp;quot;, Roboto, &amp;quot;Helvetica Neue&amp;quot;, Arial, &amp;quot;Noto Sans&amp;quot;, sans-serif, &amp;quot;Apple Color Emoji&amp;quot;, &amp;quot;Segoe UI Emoji&amp;quot;, &amp;quot;Segoe UI Symbol&amp;quot;, &amp;quot;Noto Color Emoji&amp;quot;; font-size: 15px; font-style: normal; font-variant-ligatures: normal; font-variant-caps: normal; font-weight: 400; letter-spacing: -0.4px; orphans: 2; text-align: start; text-indent: 0px; text-transform: none; widows: 2; word-spacing: 0px; -webkit-text-stroke-width: 0px; white-space: pre-wrap; text-decoration-thickness: initial; text-decoration-style: initial; text-decoration-color: initial; float: none; display: inline !important;&quot;&gt;&lt;font color=&quot;#ff8000&quot;&gt;def compute_samples_for_uplifts(&lt;/font&gt;&lt;/span&gt;" style="text;whiteSpace=wrap;html=1;" vertex="1" parent="WIyWlLk6GJQsqaUBKTNV-1">
          <mxGeometry x="2960" y="820" width="260" height="40" as="geometry" />
        </mxCell>
        <mxCell id="bgpGDWmcntnncIZ7-7qG-41" value="" style="edgeStyle=orthogonalEdgeStyle;rounded=0;orthogonalLoop=1;jettySize=auto;html=1;" edge="1" parent="WIyWlLk6GJQsqaUBKTNV-1" source="bgpGDWmcntnncIZ7-7qG-39" target="bgpGDWmcntnncIZ7-7qG-40">
          <mxGeometry relative="1" as="geometry" />
        </mxCell>
        <mxCell id="bgpGDWmcntnncIZ7-7qG-39" value="initialize : final samples&amp;nbsp; AND final_features&amp;nbsp;" style="rounded=0;whiteSpace=wrap;html=1;" vertex="1" parent="WIyWlLk6GJQsqaUBKTNV-1">
          <mxGeometry x="3030" y="879" width="270" height="60" as="geometry" />
        </mxCell>
        <mxCell id="bgpGDWmcntnncIZ7-7qG-43" value="" style="edgeStyle=orthogonalEdgeStyle;rounded=0;orthogonalLoop=1;jettySize=auto;html=1;" edge="1" parent="WIyWlLk6GJQsqaUBKTNV-1" source="bgpGDWmcntnncIZ7-7qG-40" target="bgpGDWmcntnncIZ7-7qG-42">
          <mxGeometry relative="1" as="geometry" />
        </mxCell>
        <mxCell id="bgpGDWmcntnncIZ7-7qG-40" value="define&amp;nbsp; parellelized function for computing uplift samples&amp;nbsp;" style="rounded=0;whiteSpace=wrap;html=1;" vertex="1" parent="WIyWlLk6GJQsqaUBKTNV-1">
          <mxGeometry x="3030" y="980" width="270" height="60" as="geometry" />
        </mxCell>
        <mxCell id="bgpGDWmcntnncIZ7-7qG-45" value="" style="edgeStyle=orthogonalEdgeStyle;rounded=0;orthogonalLoop=1;jettySize=auto;html=1;" edge="1" parent="WIyWlLk6GJQsqaUBKTNV-1" source="bgpGDWmcntnncIZ7-7qG-42" target="bgpGDWmcntnncIZ7-7qG-44">
          <mxGeometry relative="1" as="geometry" />
        </mxCell>
        <mxCell id="bgpGDWmcntnncIZ7-7qG-42" value="set up multi processing" style="whiteSpace=wrap;html=1;rounded=0;" vertex="1" parent="WIyWlLk6GJQsqaUBKTNV-1">
          <mxGeometry x="3030" y="1060" width="270" height="60" as="geometry" />
        </mxCell>
        <mxCell id="bgpGDWmcntnncIZ7-7qG-44" value="" style="whiteSpace=wrap;html=1;rounded=0;fillColor=#e1d5e7;strokeColor=#9673a6;" vertex="1" parent="WIyWlLk6GJQsqaUBKTNV-1">
          <mxGeometry x="3010" y="1150" width="320" height="270" as="geometry" />
        </mxCell>
        <mxCell id="bgpGDWmcntnncIZ7-7qG-46" value="&lt;span style=&quot;color: rgb(0, 0, 0); font-family: Helvetica; font-size: 12px; font-style: normal; font-variant-ligatures: normal; font-variant-caps: normal; font-weight: 400; letter-spacing: normal; orphans: 2; text-align: center; text-indent: 0px; text-transform: none; widows: 2; word-spacing: 0px; -webkit-text-stroke-width: 0px; white-space: normal; background-color: rgb(251, 251, 251); text-decoration-thickness: initial; text-decoration-style: initial; text-decoration-color: initial; display: inline !important; float: none;&quot;&gt;Parallelized Process&lt;/span&gt;" style="text;whiteSpace=wrap;html=1;" vertex="1" parent="WIyWlLk6GJQsqaUBKTNV-1">
          <mxGeometry x="3030" y="1130" width="160" height="40" as="geometry" />
        </mxCell>
        <mxCell id="bgpGDWmcntnncIZ7-7qG-47" value="" style="endArrow=classic;html=1;rounded=0;exitX=0.5;exitY=1;exitDx=0;exitDy=0;" edge="1" parent="WIyWlLk6GJQsqaUBKTNV-1" source="bgpGDWmcntnncIZ7-7qG-48">
          <mxGeometry width="50" height="50" relative="1" as="geometry">
            <mxPoint x="3150" y="1160" as="sourcePoint" />
            <mxPoint x="3165" y="1192" as="targetPoint" />
          </mxGeometry>
        </mxCell>
        <mxCell id="bgpGDWmcntnncIZ7-7qG-49" value="" style="endArrow=classic;html=1;rounded=0;exitX=0.5;exitY=1;exitDx=0;exitDy=0;" edge="1" parent="WIyWlLk6GJQsqaUBKTNV-1" source="bgpGDWmcntnncIZ7-7qG-42" target="bgpGDWmcntnncIZ7-7qG-48">
          <mxGeometry width="50" height="50" relative="1" as="geometry">
            <mxPoint x="3165" y="1120" as="sourcePoint" />
            <mxPoint x="3165" y="1192" as="targetPoint" />
          </mxGeometry>
        </mxCell>
        <mxCell id="bgpGDWmcntnncIZ7-7qG-51" value="" style="edgeStyle=orthogonalEdgeStyle;rounded=0;orthogonalLoop=1;jettySize=auto;html=1;exitX=0.407;exitY=0.269;exitDx=0;exitDy=0;exitPerimeter=0;" edge="1" parent="WIyWlLk6GJQsqaUBKTNV-1" source="bgpGDWmcntnncIZ7-7qG-44" target="bgpGDWmcntnncIZ7-7qG-50">
          <mxGeometry relative="1" as="geometry">
            <Array as="points">
              <mxPoint x="3090" y="1220" />
            </Array>
          </mxGeometry>
        </mxCell>
        <mxCell id="bgpGDWmcntnncIZ7-7qG-63" value="" style="edgeStyle=orthogonalEdgeStyle;rounded=0;orthogonalLoop=1;jettySize=auto;html=1;" edge="1" parent="WIyWlLk6GJQsqaUBKTNV-1" source="bgpGDWmcntnncIZ7-7qG-48" target="bgpGDWmcntnncIZ7-7qG-62">
          <mxGeometry relative="1" as="geometry" />
        </mxCell>
        <mxCell id="bgpGDWmcntnncIZ7-7qG-48" value="for each&amp;nbsp;&lt;div&gt;uplift&lt;/div&gt;" style="rhombus;whiteSpace=wrap;html=1;" vertex="1" parent="WIyWlLk6GJQsqaUBKTNV-1">
          <mxGeometry x="3125" y="1160" width="80" height="80" as="geometry" />
        </mxCell>
        <mxCell id="bgpGDWmcntnncIZ7-7qG-53" value="" style="edgeStyle=orthogonalEdgeStyle;rounded=0;orthogonalLoop=1;jettySize=auto;html=1;" edge="1" parent="WIyWlLk6GJQsqaUBKTNV-1" source="bgpGDWmcntnncIZ7-7qG-50" target="bgpGDWmcntnncIZ7-7qG-52">
          <mxGeometry relative="1" as="geometry" />
        </mxCell>
        <mxCell id="bgpGDWmcntnncIZ7-7qG-50" value="compute uplifted features" style="whiteSpace=wrap;html=1;" vertex="1" parent="WIyWlLk6GJQsqaUBKTNV-1">
          <mxGeometry x="3030" y="1240" width="110" height="30" as="geometry" />
        </mxCell>
        <mxCell id="bgpGDWmcntnncIZ7-7qG-52" value="create uplift datadict" style="whiteSpace=wrap;html=1;" vertex="1" parent="WIyWlLk6GJQsqaUBKTNV-1">
          <mxGeometry x="3030" y="1280" width="110" height="30" as="geometry" />
        </mxCell>
        <mxCell id="bgpGDWmcntnncIZ7-7qG-57" value="" style="edgeStyle=orthogonalEdgeStyle;rounded=0;orthogonalLoop=1;jettySize=auto;html=1;" edge="1" parent="WIyWlLk6GJQsqaUBKTNV-1" source="bgpGDWmcntnncIZ7-7qG-54" target="bgpGDWmcntnncIZ7-7qG-56">
          <mxGeometry relative="1" as="geometry" />
        </mxCell>
        <mxCell id="bgpGDWmcntnncIZ7-7qG-54" value="Generate quantities (stan model)" style="whiteSpace=wrap;html=1;fillColor=#d5e8d4;strokeColor=#82b366;" vertex="1" parent="WIyWlLk6GJQsqaUBKTNV-1">
          <mxGeometry x="3030" y="1320" width="110" height="30" as="geometry" />
        </mxCell>
        <mxCell id="bgpGDWmcntnncIZ7-7qG-59" value="" style="edgeStyle=orthogonalEdgeStyle;rounded=0;orthogonalLoop=1;jettySize=auto;html=1;" edge="1" parent="WIyWlLk6GJQsqaUBKTNV-1" source="bgpGDWmcntnncIZ7-7qG-56" target="bgpGDWmcntnncIZ7-7qG-58">
          <mxGeometry relative="1" as="geometry" />
        </mxCell>
        <mxCell id="bgpGDWmcntnncIZ7-7qG-56" value="process and denormalize Samples" style="whiteSpace=wrap;html=1;" vertex="1" parent="WIyWlLk6GJQsqaUBKTNV-1">
          <mxGeometry x="3030" y="1360" width="110" height="50" as="geometry" />
        </mxCell>
        <mxCell id="bgpGDWmcntnncIZ7-7qG-61" value="" style="edgeStyle=orthogonalEdgeStyle;rounded=0;orthogonalLoop=1;jettySize=auto;html=1;entryX=1;entryY=1;entryDx=0;entryDy=0;" edge="1" parent="WIyWlLk6GJQsqaUBKTNV-1" source="bgpGDWmcntnncIZ7-7qG-58" target="bgpGDWmcntnncIZ7-7qG-48">
          <mxGeometry relative="1" as="geometry" />
        </mxCell>
        <mxCell id="bgpGDWmcntnncIZ7-7qG-58" value="store results&lt;div&gt;SAMPLES_DICT&lt;/div&gt;&lt;div&gt;and&lt;/div&gt;&lt;div&gt;FEATURES_DICT&lt;/div&gt;" style="whiteSpace=wrap;html=1;" vertex="1" parent="WIyWlLk6GJQsqaUBKTNV-1">
          <mxGeometry x="3190" y="1290" width="110" height="100" as="geometry" />
        </mxCell>
        <mxCell id="bgpGDWmcntnncIZ7-7qG-65" value="" style="edgeStyle=orthogonalEdgeStyle;rounded=0;orthogonalLoop=1;jettySize=auto;html=1;" edge="1" parent="WIyWlLk6GJQsqaUBKTNV-1" source="bgpGDWmcntnncIZ7-7qG-62" target="bgpGDWmcntnncIZ7-7qG-64">
          <mxGeometry relative="1" as="geometry" />
        </mxCell>
        <mxCell id="bgpGDWmcntnncIZ7-7qG-62" value="merge results&amp;nbsp;&lt;div&gt;into a dict&lt;/div&gt;" style="rounded=1;whiteSpace=wrap;html=1;" vertex="1" parent="WIyWlLk6GJQsqaUBKTNV-1">
          <mxGeometry x="3360" y="1170" width="120" height="60" as="geometry" />
        </mxCell>
        <mxCell id="bgpGDWmcntnncIZ7-7qG-64" value="return dict" style="rounded=1;whiteSpace=wrap;html=1;" vertex="1" parent="WIyWlLk6GJQsqaUBKTNV-1">
          <mxGeometry x="3360" y="1310" width="120" height="60" as="geometry" />
        </mxCell>
        <mxCell id="bgpGDWmcntnncIZ7-7qG-66" value="&lt;code class=&quot;bg-text-200/5 border border-0.5 border-border-300 text-danger-000 whitespace-pre-wrap rounded-[0.3rem] px-1 py-px text-[0.9rem]&quot;&gt;generate_quantities computes&amp;nbsp;&lt;/code&gt;additional quantities of interest based on the fitted model parameters and data, without affecting the posterior distribution&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;is like predict but for probabilistic dist not point estimate&lt;/div&gt;" style="text;html=1;align=center;verticalAlign=middle;whiteSpace=wrap;rounded=0;fillColor=#dae8fc;strokeColor=#6c8ebf;" vertex="1" parent="WIyWlLk6GJQsqaUBKTNV-1">
          <mxGeometry x="3390" y="894" width="180" height="186" as="geometry" />
        </mxCell>
        <mxCell id="bgpGDWmcntnncIZ7-7qG-68" value="" style="edgeStyle=orthogonalEdgeStyle;rounded=0;orthogonalLoop=1;jettySize=auto;html=1;entryX=0;entryY=0.316;entryDx=0;entryDy=0;entryPerimeter=0;" edge="1" parent="WIyWlLk6GJQsqaUBKTNV-1" target="bgpGDWmcntnncIZ7-7qG-69">
          <mxGeometry relative="1" as="geometry">
            <mxPoint x="2379" y="1178" as="sourcePoint" />
            <mxPoint x="3085" y="1320" as="targetPoint" />
            <Array as="points">
              <mxPoint x="2379" y="1160" />
              <mxPoint x="2800" y="1160" />
              <mxPoint x="2800" y="1852" />
            </Array>
          </mxGeometry>
        </mxCell>
        <mxCell id="bgpGDWmcntnncIZ7-7qG-67" value="" style="shape=image;verticalLabelPosition=bottom;labelBackgroundColor=default;verticalAlign=top;aspect=fixed;imageAspect=0;image=data:image/png,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;" vertex="1" parent="WIyWlLk6GJQsqaUBKTNV-1">
          <mxGeometry x="3057" y="1720" width="376" height="1124" as="geometry" />
        </mxCell>
        <mxCell id="bgpGDWmcntnncIZ7-7qG-70" value="&lt;span style=&quot;font-family: Helvetica; font-style: normal; font-variant-ligatures: normal; font-variant-caps: normal; font-weight: 400; letter-spacing: normal; orphans: 2; text-align: left; text-indent: 0px; text-transform: none; widows: 2; word-spacing: 0px; -webkit-text-stroke-width: 0px; white-space: normal; background-color: rgb(251, 251, 251); text-decoration-thickness: initial; text-decoration-style: initial; text-decoration-color: initial; float: none; display: inline !important;&quot;&gt;&lt;font style=&quot;font-size: 16px;&quot; color=&quot;#ff8000&quot;&gt;.compute_delta_to_null_values&lt;/font&gt;&lt;/span&gt;" style="text;whiteSpace=wrap;html=1;" vertex="1" parent="WIyWlLk6GJQsqaUBKTNV-1">
          <mxGeometry x="3010" y="1520" width="200" height="40" as="geometry" />
        </mxCell>
        <mxCell id="bgpGDWmcntnncIZ7-7qG-71" value="Computes the delta to null values statistics aggregated on a full year from the samples&#xa;        :param samples_dict: dictionary containing the samples for all uplift values for a touchpoint.&#xa;        Expected dimension is for each array n_iter x n_months&#xa;        :param tp: touchpoint of interest&#xa;        :param year: year of interest&#xa;        :param is_contrib: computing contribution or uplift&#xa;        :return: Dataframe containing the delta to null value statistics for the considered year&#xa;        &quot;&quot;&quot;" style="text;whiteSpace=wrap;fillColor=#dae8fc;strokeColor=#6c8ebf;" vertex="1" parent="WIyWlLk6GJQsqaUBKTNV-1">
          <mxGeometry x="3030" y="1560" width="560" height="140" as="geometry" />
        </mxCell>
        <mxCell id="bgpGDWmcntnncIZ7-7qG-73" value="&lt;span style=&quot;color: rgba(0, 0, 0, 0); font-family: monospace; font-size: 0px; text-align: start; text-wrap: nowrap;&quot;&gt;%3CmxGraphModel%3E%3Croot%3E%3CmxCell%20id%3D%220%22%2F%3E%3CmxCell%20id%3D%221%22%20parent%3D%220%22%2F%3E%3CmxCell%20id%3D%222%22%20value%3D%22compute_distribution_values%22%20style%3D%22text%3BwhiteSpace%3Dwrap%3BfillColor%3D%23dae8fc%3BstrokeColor%3D%236c8ebf%3B%22%20vertex%3D%221%22%20parent%3D%221%22%3E%3CmxGeometry%20x%3D%223030%22%20y%3D%221560%22%20width%3D%22560%22%20height%3D%22140%22%20as%3D%22geometry%22%2F%3E%3C%2FmxCell%3E%3C%2Froot%3E%3C%2FmxGraphModel%3E&lt;/span&gt;" style="text;html=1;align=center;verticalAlign=middle;whiteSpace=wrap;rounded=0;" vertex="1" parent="WIyWlLk6GJQsqaUBKTNV-1">
          <mxGeometry x="2145" y="1520" width="60" height="30" as="geometry" />
        </mxCell>
        <mxCell id="bgpGDWmcntnncIZ7-7qG-74" value="&lt;font color=&quot;#ff5c21&quot; style=&quot;font-size: 16px;&quot;&gt;compute_distribution_values&lt;/font&gt;" style="text;html=1;align=center;verticalAlign=middle;resizable=0;points=[];autosize=1;strokeColor=none;fillColor=none;" vertex="1" parent="WIyWlLk6GJQsqaUBKTNV-1">
          <mxGeometry x="2100" y="1478" width="230" height="30" as="geometry" />
        </mxCell>
        <mxCell id="bgpGDWmcntnncIZ7-7qG-76" value="Aggregates the N samples output from STAN into aggregated statistics :&#xa;            mean, percentile 10 and 90, aggregated per year week and touchpoint&#xa;        :param samples: array of samples for a given touchpoint and a given uplift.&#xa;        Expected dimensions are n_iter x n_weeks&#xa;        :param uplift: uplift value&#xa;        :param features_df: uplifted features df&#xa;        :param tp: touchpoint of interest&#xa;        :param year: year considered&#xa;        :return: Dataframe containing the delta to null volumes stats for each week" style="text;whiteSpace=wrap;fillColor=#dae8fc;strokeColor=#6c8ebf;" vertex="1" parent="WIyWlLk6GJQsqaUBKTNV-1">
          <mxGeometry x="2110" y="1520" width="490" height="150" as="geometry" />
        </mxCell>
        <mxCell id="bgpGDWmcntnncIZ7-7qG-77" value="" style="shape=image;verticalLabelPosition=bottom;labelBackgroundColor=default;verticalAlign=top;aspect=fixed;imageAspect=0;image=data:image/png,;" vertex="1" parent="WIyWlLk6GJQsqaUBKTNV-1">
          <mxGeometry x="2130" y="1690" width="412" height="1105" as="geometry" />
        </mxCell>
        <mxCell id="bgpGDWmcntnncIZ7-7qG-78" value="" style="edgeStyle=elbowEdgeStyle;elbow=horizontal;endArrow=classic;html=1;curved=0;rounded=0;endSize=8;startSize=8;" edge="1" parent="WIyWlLk6GJQsqaUBKTNV-1">
          <mxGeometry width="50" height="50" relative="1" as="geometry">
            <mxPoint x="2393" y="1306" as="sourcePoint" />
            <mxPoint x="2430" y="1450" as="targetPoint" />
            <Array as="points">
              <mxPoint x="2430" y="1390" />
            </Array>
          </mxGeometry>
        </mxCell>
      </root>
    </mxGraphModel>
  </diagram>
</mxfile>
